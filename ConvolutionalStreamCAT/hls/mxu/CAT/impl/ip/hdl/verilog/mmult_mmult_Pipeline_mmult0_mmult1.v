// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_mmult_Pipeline_mmult0_mmult1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_buffer_address0,
        a_buffer_ce0,
        a_buffer_q0,
        a_buffer_address1,
        a_buffer_ce1,
        a_buffer_q1,
        a_buffer_address2,
        a_buffer_ce2,
        a_buffer_q2,
        a_buffer_address3,
        a_buffer_ce3,
        a_buffer_q3,
        a_buffer_address4,
        a_buffer_ce4,
        a_buffer_q4,
        a_buffer_address5,
        a_buffer_ce5,
        a_buffer_q5,
        a_buffer_address6,
        a_buffer_ce6,
        a_buffer_q6,
        a_buffer_address7,
        a_buffer_ce7,
        a_buffer_q7,
        b_buffer_address0,
        b_buffer_ce0,
        b_buffer_q0,
        b_buffer_address1,
        b_buffer_ce1,
        b_buffer_q1,
        b_buffer_address2,
        b_buffer_ce2,
        b_buffer_q2,
        b_buffer_address3,
        b_buffer_ce3,
        b_buffer_q3,
        b_buffer_address4,
        b_buffer_ce4,
        b_buffer_q4,
        b_buffer_address5,
        b_buffer_ce5,
        b_buffer_q5,
        b_buffer_address6,
        b_buffer_ce6,
        b_buffer_q6,
        b_buffer_address7,
        b_buffer_ce7,
        b_buffer_q7,
        c_buffer_address0,
        c_buffer_ce0,
        c_buffer_we0,
        c_buffer_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] a_buffer_address0;
output   a_buffer_ce0;
input  [31:0] a_buffer_q0;
output  [5:0] a_buffer_address1;
output   a_buffer_ce1;
input  [31:0] a_buffer_q1;
output  [5:0] a_buffer_address2;
output   a_buffer_ce2;
input  [31:0] a_buffer_q2;
output  [5:0] a_buffer_address3;
output   a_buffer_ce3;
input  [31:0] a_buffer_q3;
output  [5:0] a_buffer_address4;
output   a_buffer_ce4;
input  [31:0] a_buffer_q4;
output  [5:0] a_buffer_address5;
output   a_buffer_ce5;
input  [31:0] a_buffer_q5;
output  [5:0] a_buffer_address6;
output   a_buffer_ce6;
input  [31:0] a_buffer_q6;
output  [5:0] a_buffer_address7;
output   a_buffer_ce7;
input  [31:0] a_buffer_q7;
output  [5:0] b_buffer_address0;
output   b_buffer_ce0;
input  [31:0] b_buffer_q0;
output  [5:0] b_buffer_address1;
output   b_buffer_ce1;
input  [31:0] b_buffer_q1;
output  [5:0] b_buffer_address2;
output   b_buffer_ce2;
input  [31:0] b_buffer_q2;
output  [5:0] b_buffer_address3;
output   b_buffer_ce3;
input  [31:0] b_buffer_q3;
output  [5:0] b_buffer_address4;
output   b_buffer_ce4;
input  [31:0] b_buffer_q4;
output  [5:0] b_buffer_address5;
output   b_buffer_ce5;
input  [31:0] b_buffer_q5;
output  [5:0] b_buffer_address6;
output   b_buffer_ce6;
input  [31:0] b_buffer_q6;
output  [5:0] b_buffer_address7;
output   b_buffer_ce7;
input  [31:0] b_buffer_q7;
output  [5:0] c_buffer_address0;
output   c_buffer_ce0;
output   c_buffer_we0;
output  [31:0] c_buffer_d0;

reg ap_idle;
reg a_buffer_ce0;
reg a_buffer_ce1;
reg a_buffer_ce2;
reg a_buffer_ce3;
reg a_buffer_ce4;
reg a_buffer_ce5;
reg a_buffer_ce6;
reg a_buffer_ce7;
reg b_buffer_ce0;
reg b_buffer_ce1;
reg b_buffer_ce2;
reg b_buffer_ce3;
reg b_buffer_ce4;
reg b_buffer_ce5;
reg b_buffer_ce6;
reg b_buffer_ce7;
reg c_buffer_ce0;
reg c_buffer_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln22_fu_310_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] add_ln24_fu_621_p2;
reg   [5:0] add_ln24_reg_820;
reg   [5:0] add_ln24_reg_820_pp0_iter1_reg;
reg   [5:0] add_ln24_reg_820_pp0_iter2_reg;
reg   [5:0] add_ln24_reg_820_pp0_iter3_reg;
reg   [5:0] add_ln24_reg_820_pp0_iter4_reg;
reg   [5:0] add_ln24_reg_820_pp0_iter5_reg;
reg  signed [31:0] a_buffer_load_reg_825;
reg  signed [31:0] a_buffer_load_1_reg_830;
reg  signed [31:0] a_buffer_load_2_reg_835;
reg  signed [31:0] a_buffer_load_3_reg_840;
reg  signed [31:0] a_buffer_load_4_reg_845;
reg  signed [31:0] a_buffer_load_5_reg_850;
reg  signed [31:0] a_buffer_load_6_reg_855;
reg  signed [31:0] a_buffer_load_7_reg_860;
reg  signed [31:0] b_buffer_load_reg_865;
reg  signed [31:0] b_buffer_load_1_reg_870;
reg  signed [31:0] b_buffer_load_2_reg_875;
reg  signed [31:0] b_buffer_load_3_reg_880;
reg  signed [31:0] b_buffer_load_4_reg_885;
reg  signed [31:0] b_buffer_load_5_reg_890;
reg  signed [31:0] b_buffer_load_6_reg_895;
reg  signed [31:0] b_buffer_load_7_reg_900;
wire   [31:0] grp_fu_648_p2;
reg   [31:0] mul_ln26_reg_905;
wire   [31:0] grp_fu_652_p2;
reg   [31:0] mul_ln26_1_reg_910;
wire   [31:0] grp_fu_656_p2;
reg   [31:0] mul_ln26_2_reg_915;
wire   [31:0] grp_fu_660_p2;
reg   [31:0] mul_ln26_3_reg_920;
wire   [31:0] grp_fu_664_p2;
reg   [31:0] mul_ln26_4_reg_925;
wire   [31:0] grp_fu_668_p2;
reg   [31:0] mul_ln26_5_reg_930;
wire   [31:0] grp_fu_672_p2;
reg   [31:0] mul_ln26_6_reg_935;
wire   [31:0] grp_fu_676_p2;
reg   [31:0] mul_ln26_7_reg_940;
wire   [31:0] add_ln26_fu_680_p2;
reg   [31:0] add_ln26_reg_945;
wire   [31:0] add_ln26_1_fu_684_p2;
reg   [31:0] add_ln26_1_reg_950;
wire   [31:0] add_ln26_5_fu_696_p2;
reg   [31:0] add_ln26_5_reg_955;
wire   [31:0] add_ln26_6_fu_706_p2;
reg   [31:0] add_ln26_6_reg_960;
wire   [63:0] zext_ln22_fu_389_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln26_1_fu_408_p1;
wire   [63:0] zext_ln26_2_fu_427_p1;
wire   [63:0] zext_ln26_3_fu_446_p1;
wire   [63:0] zext_ln26_4_fu_465_p1;
wire   [63:0] zext_ln26_5_fu_484_p1;
wire   [63:0] zext_ln26_6_fu_503_p1;
wire   [63:0] zext_ln26_7_fu_522_p1;
wire   [63:0] zext_ln26_fu_539_p1;
wire   [63:0] zext_ln26_9_fu_550_p1;
wire   [63:0] zext_ln26_10_fu_561_p1;
wire   [63:0] zext_ln26_11_fu_572_p1;
wire   [63:0] zext_ln26_12_fu_583_p1;
wire   [63:0] zext_ln26_13_fu_594_p1;
wire   [63:0] zext_ln26_14_fu_605_p1;
wire   [63:0] zext_ln26_15_fu_616_p1;
wire   [63:0] zext_ln24_fu_711_p1;
reg   [3:0] j_fu_58;
wire   [3:0] add_ln23_fu_627_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_62;
wire   [3:0] select_ln22_1_fu_361_p3;
reg   [3:0] ap_sig_allocacmp_i_1;
reg   [6:0] indvar_flatten_fu_66;
wire   [6:0] add_ln22_1_fu_316_p2;
reg   [6:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [2:0] trunc_ln26_fu_298_p1;
wire   [3:0] add_ln22_fu_325_p2;
wire   [0:0] icmp_ln23_fu_335_p2;
wire   [3:0] select_ln22_fu_341_p3;
wire   [2:0] trunc_ln22_fu_331_p1;
wire   [2:0] trunc_ln24_fu_369_p1;
wire   [5:0] tmp_10_cast_fu_353_p3;
wire   [5:0] tmp_2_cast_fu_302_p3;
wire   [5:0] select_ln22_2_fu_381_p3;
wire   [5:0] select_ln22_10_fu_394_p3;
wire   [5:0] or_ln22_fu_402_p2;
wire   [5:0] select_ln22_11_fu_413_p3;
wire   [5:0] or_ln22_1_fu_421_p2;
wire   [5:0] select_ln22_12_fu_432_p3;
wire   [5:0] or_ln22_2_fu_440_p2;
wire   [5:0] select_ln22_13_fu_451_p3;
wire   [5:0] or_ln22_3_fu_459_p2;
wire   [5:0] select_ln22_14_fu_470_p3;
wire   [5:0] or_ln22_4_fu_478_p2;
wire   [5:0] select_ln22_15_fu_489_p3;
wire   [5:0] or_ln22_5_fu_497_p2;
wire   [5:0] select_ln22_16_fu_508_p3;
wire   [5:0] or_ln22_6_fu_516_p2;
wire   [2:0] trunc_ln26_1_fu_349_p1;
wire   [5:0] tmp_1_fu_531_p3;
wire   [5:0] or_ln26_fu_544_p2;
wire   [5:0] or_ln26_1_fu_555_p2;
wire   [5:0] or_ln26_2_fu_566_p2;
wire   [5:0] or_ln26_3_fu_577_p2;
wire   [5:0] or_ln26_4_fu_588_p2;
wire   [5:0] or_ln26_5_fu_599_p2;
wire   [5:0] or_ln26_6_fu_610_p2;
wire   [5:0] tmp_s_fu_373_p3;
wire   [5:0] zext_ln26_8_fu_527_p1;
wire   [31:0] add_ln26_4_fu_692_p2;
wire   [31:0] add_ln26_3_fu_688_p2;
wire   [31:0] add_ln26_2_fu_702_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_reg_865),
    .din1(a_buffer_load_reg_825),
    .ce(1'b1),
    .dout(grp_fu_648_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_1_reg_870),
    .din1(a_buffer_load_1_reg_830),
    .ce(1'b1),
    .dout(grp_fu_652_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_2_reg_875),
    .din1(a_buffer_load_2_reg_835),
    .ce(1'b1),
    .dout(grp_fu_656_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_3_reg_880),
    .din1(a_buffer_load_3_reg_840),
    .ce(1'b1),
    .dout(grp_fu_660_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_4_reg_885),
    .din1(a_buffer_load_4_reg_845),
    .ce(1'b1),
    .dout(grp_fu_664_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_5_reg_890),
    .din1(a_buffer_load_5_reg_850),
    .ce(1'b1),
    .dout(grp_fu_668_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_6_reg_895),
    .din1(a_buffer_load_6_reg_855),
    .ce(1'b1),
    .dout(grp_fu_672_p2)
);

mmult_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(b_buffer_load_7_reg_900),
    .din1(a_buffer_load_7_reg_860),
    .ce(1'b1),
    .dout(grp_fu_676_p2)
);

mmult_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_310_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_62 <= select_ln22_1_fu_361_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_62 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_310_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_66 <= add_ln22_1_fu_316_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_66 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln22_fu_310_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_58 <= add_ln23_fu_627_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_58 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_load_1_reg_830 <= a_buffer_q6;
        a_buffer_load_2_reg_835 <= a_buffer_q5;
        a_buffer_load_3_reg_840 <= a_buffer_q4;
        a_buffer_load_4_reg_845 <= a_buffer_q3;
        a_buffer_load_5_reg_850 <= a_buffer_q2;
        a_buffer_load_6_reg_855 <= a_buffer_q1;
        a_buffer_load_7_reg_860 <= a_buffer_q0;
        a_buffer_load_reg_825 <= a_buffer_q7;
        b_buffer_load_1_reg_870 <= b_buffer_q6;
        b_buffer_load_2_reg_875 <= b_buffer_q5;
        b_buffer_load_3_reg_880 <= b_buffer_q4;
        b_buffer_load_4_reg_885 <= b_buffer_q3;
        b_buffer_load_5_reg_890 <= b_buffer_q2;
        b_buffer_load_6_reg_895 <= b_buffer_q1;
        b_buffer_load_7_reg_900 <= b_buffer_q0;
        b_buffer_load_reg_865 <= b_buffer_q7;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_310_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln24_reg_820 <= add_ln24_fu_621_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln24_reg_820_pp0_iter1_reg <= add_ln24_reg_820;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln24_reg_820_pp0_iter2_reg <= add_ln24_reg_820_pp0_iter1_reg;
        add_ln24_reg_820_pp0_iter3_reg <= add_ln24_reg_820_pp0_iter2_reg;
        add_ln24_reg_820_pp0_iter4_reg <= add_ln24_reg_820_pp0_iter3_reg;
        add_ln24_reg_820_pp0_iter5_reg <= add_ln24_reg_820_pp0_iter4_reg;
        add_ln26_1_reg_950 <= add_ln26_1_fu_684_p2;
        add_ln26_5_reg_955 <= add_ln26_5_fu_696_p2;
        add_ln26_6_reg_960 <= add_ln26_6_fu_706_p2;
        add_ln26_reg_945 <= add_ln26_fu_680_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        mul_ln26_1_reg_910 <= grp_fu_652_p2;
        mul_ln26_2_reg_915 <= grp_fu_656_p2;
        mul_ln26_3_reg_920 <= grp_fu_660_p2;
        mul_ln26_4_reg_925 <= grp_fu_664_p2;
        mul_ln26_5_reg_930 <= grp_fu_668_p2;
        mul_ln26_6_reg_935 <= grp_fu_672_p2;
        mul_ln26_7_reg_940 <= grp_fu_676_p2;
        mul_ln26_reg_905 <= grp_fu_648_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce0 = 1'b1;
    end else begin
        a_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce1 = 1'b1;
    end else begin
        a_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce2 = 1'b1;
    end else begin
        a_buffer_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce3 = 1'b1;
    end else begin
        a_buffer_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce4 = 1'b1;
    end else begin
        a_buffer_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce5 = 1'b1;
    end else begin
        a_buffer_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce6 = 1'b1;
    end else begin
        a_buffer_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_buffer_ce7 = 1'b1;
    end else begin
        a_buffer_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln22_fu_310_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 7'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_66;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_58;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce0 = 1'b1;
    end else begin
        b_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce1 = 1'b1;
    end else begin
        b_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce2 = 1'b1;
    end else begin
        b_buffer_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce3 = 1'b1;
    end else begin
        b_buffer_ce3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce4 = 1'b1;
    end else begin
        b_buffer_ce4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce5 = 1'b1;
    end else begin
        b_buffer_ce5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce6 = 1'b1;
    end else begin
        b_buffer_ce6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        b_buffer_ce7 = 1'b1;
    end else begin
        b_buffer_ce7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        c_buffer_ce0 = 1'b1;
    end else begin
        c_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        c_buffer_we0 = 1'b1;
    end else begin
        c_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_buffer_address0 = zext_ln26_7_fu_522_p1;

assign a_buffer_address1 = zext_ln26_6_fu_503_p1;

assign a_buffer_address2 = zext_ln26_5_fu_484_p1;

assign a_buffer_address3 = zext_ln26_4_fu_465_p1;

assign a_buffer_address4 = zext_ln26_3_fu_446_p1;

assign a_buffer_address5 = zext_ln26_2_fu_427_p1;

assign a_buffer_address6 = zext_ln26_1_fu_408_p1;

assign a_buffer_address7 = zext_ln22_fu_389_p1;

assign add_ln22_1_fu_316_p2 = (ap_sig_allocacmp_indvar_flatten_load + 7'd1);

assign add_ln22_fu_325_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln23_fu_627_p2 = (select_ln22_fu_341_p3 + 4'd1);

assign add_ln24_fu_621_p2 = (tmp_s_fu_373_p3 + zext_ln26_8_fu_527_p1);

assign add_ln26_1_fu_684_p2 = (mul_ln26_2_reg_915 + mul_ln26_3_reg_920);

assign add_ln26_2_fu_702_p2 = (add_ln26_1_reg_950 + add_ln26_reg_945);

assign add_ln26_3_fu_688_p2 = (mul_ln26_4_reg_925 + mul_ln26_5_reg_930);

assign add_ln26_4_fu_692_p2 = (mul_ln26_6_reg_935 + mul_ln26_7_reg_940);

assign add_ln26_5_fu_696_p2 = (add_ln26_4_fu_692_p2 + add_ln26_3_fu_688_p2);

assign add_ln26_6_fu_706_p2 = (add_ln26_5_reg_955 + add_ln26_2_fu_702_p2);

assign add_ln26_fu_680_p2 = (mul_ln26_1_reg_910 + mul_ln26_reg_905);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_buffer_address0 = zext_ln26_15_fu_616_p1;

assign b_buffer_address1 = zext_ln26_14_fu_605_p1;

assign b_buffer_address2 = zext_ln26_13_fu_594_p1;

assign b_buffer_address3 = zext_ln26_12_fu_583_p1;

assign b_buffer_address4 = zext_ln26_11_fu_572_p1;

assign b_buffer_address5 = zext_ln26_10_fu_561_p1;

assign b_buffer_address6 = zext_ln26_9_fu_550_p1;

assign b_buffer_address7 = zext_ln26_fu_539_p1;

assign c_buffer_address0 = zext_ln24_fu_711_p1;

assign c_buffer_d0 = add_ln26_6_reg_960;

assign icmp_ln22_fu_310_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_335_p2 = ((ap_sig_allocacmp_j_load == 4'd8) ? 1'b1 : 1'b0);

assign or_ln22_1_fu_421_p2 = (select_ln22_11_fu_413_p3 | 6'd2);

assign or_ln22_2_fu_440_p2 = (select_ln22_12_fu_432_p3 | 6'd3);

assign or_ln22_3_fu_459_p2 = (select_ln22_13_fu_451_p3 | 6'd4);

assign or_ln22_4_fu_478_p2 = (select_ln22_14_fu_470_p3 | 6'd5);

assign or_ln22_5_fu_497_p2 = (select_ln22_15_fu_489_p3 | 6'd6);

assign or_ln22_6_fu_516_p2 = (select_ln22_16_fu_508_p3 | 6'd7);

assign or_ln22_fu_402_p2 = (select_ln22_10_fu_394_p3 | 6'd1);

assign or_ln26_1_fu_555_p2 = (tmp_1_fu_531_p3 | 6'd2);

assign or_ln26_2_fu_566_p2 = (tmp_1_fu_531_p3 | 6'd3);

assign or_ln26_3_fu_577_p2 = (tmp_1_fu_531_p3 | 6'd4);

assign or_ln26_4_fu_588_p2 = (tmp_1_fu_531_p3 | 6'd5);

assign or_ln26_5_fu_599_p2 = (tmp_1_fu_531_p3 | 6'd6);

assign or_ln26_6_fu_610_p2 = (tmp_1_fu_531_p3 | 6'd7);

assign or_ln26_fu_544_p2 = (tmp_1_fu_531_p3 | 6'd1);

assign select_ln22_10_fu_394_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_11_fu_413_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_12_fu_432_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_13_fu_451_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_14_fu_470_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_15_fu_489_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_16_fu_508_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_1_fu_361_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? add_ln22_fu_325_p2 : ap_sig_allocacmp_i_1);

assign select_ln22_2_fu_381_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? tmp_10_cast_fu_353_p3 : tmp_2_cast_fu_302_p3);

assign select_ln22_fu_341_p3 = ((icmp_ln23_fu_335_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign tmp_10_cast_fu_353_p3 = {{trunc_ln22_fu_331_p1}, {3'd0}};

assign tmp_1_fu_531_p3 = {{trunc_ln26_1_fu_349_p1}, {3'd0}};

assign tmp_2_cast_fu_302_p3 = {{trunc_ln26_fu_298_p1}, {3'd0}};

assign tmp_s_fu_373_p3 = {{trunc_ln24_fu_369_p1}, {3'd0}};

assign trunc_ln22_fu_331_p1 = add_ln22_fu_325_p2[2:0];

assign trunc_ln24_fu_369_p1 = select_ln22_1_fu_361_p3[2:0];

assign trunc_ln26_1_fu_349_p1 = select_ln22_fu_341_p3[2:0];

assign trunc_ln26_fu_298_p1 = ap_sig_allocacmp_i_1[2:0];

assign zext_ln22_fu_389_p1 = select_ln22_2_fu_381_p3;

assign zext_ln24_fu_711_p1 = add_ln24_reg_820_pp0_iter5_reg;

assign zext_ln26_10_fu_561_p1 = or_ln26_1_fu_555_p2;

assign zext_ln26_11_fu_572_p1 = or_ln26_2_fu_566_p2;

assign zext_ln26_12_fu_583_p1 = or_ln26_3_fu_577_p2;

assign zext_ln26_13_fu_594_p1 = or_ln26_4_fu_588_p2;

assign zext_ln26_14_fu_605_p1 = or_ln26_5_fu_599_p2;

assign zext_ln26_15_fu_616_p1 = or_ln26_6_fu_610_p2;

assign zext_ln26_1_fu_408_p1 = or_ln22_fu_402_p2;

assign zext_ln26_2_fu_427_p1 = or_ln22_1_fu_421_p2;

assign zext_ln26_3_fu_446_p1 = or_ln22_2_fu_440_p2;

assign zext_ln26_4_fu_465_p1 = or_ln22_3_fu_459_p2;

assign zext_ln26_5_fu_484_p1 = or_ln22_4_fu_478_p2;

assign zext_ln26_6_fu_503_p1 = or_ln22_5_fu_497_p2;

assign zext_ln26_7_fu_522_p1 = or_ln22_6_fu_516_p2;

assign zext_ln26_8_fu_527_p1 = select_ln22_fu_341_p3;

assign zext_ln26_9_fu_550_p1 = or_ln26_fu_544_p2;

assign zext_ln26_fu_539_p1 = tmp_1_fu_531_p3;

endmodule //mmult_mmult_Pipeline_mmult0_mmult1
