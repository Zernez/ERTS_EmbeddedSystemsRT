// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mmult_mmult,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=223,HLS_SYN_TPT=none,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=5076,HLS_SYN_LUT=6113,HLS_VERSION=2022_2}" *)

module mmult (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_A_port_AWVALID,
        m_axi_A_port_AWREADY,
        m_axi_A_port_AWADDR,
        m_axi_A_port_AWID,
        m_axi_A_port_AWLEN,
        m_axi_A_port_AWSIZE,
        m_axi_A_port_AWBURST,
        m_axi_A_port_AWLOCK,
        m_axi_A_port_AWCACHE,
        m_axi_A_port_AWPROT,
        m_axi_A_port_AWQOS,
        m_axi_A_port_AWREGION,
        m_axi_A_port_AWUSER,
        m_axi_A_port_WVALID,
        m_axi_A_port_WREADY,
        m_axi_A_port_WDATA,
        m_axi_A_port_WSTRB,
        m_axi_A_port_WLAST,
        m_axi_A_port_WID,
        m_axi_A_port_WUSER,
        m_axi_A_port_ARVALID,
        m_axi_A_port_ARREADY,
        m_axi_A_port_ARADDR,
        m_axi_A_port_ARID,
        m_axi_A_port_ARLEN,
        m_axi_A_port_ARSIZE,
        m_axi_A_port_ARBURST,
        m_axi_A_port_ARLOCK,
        m_axi_A_port_ARCACHE,
        m_axi_A_port_ARPROT,
        m_axi_A_port_ARQOS,
        m_axi_A_port_ARREGION,
        m_axi_A_port_ARUSER,
        m_axi_A_port_RVALID,
        m_axi_A_port_RREADY,
        m_axi_A_port_RDATA,
        m_axi_A_port_RLAST,
        m_axi_A_port_RID,
        m_axi_A_port_RUSER,
        m_axi_A_port_RRESP,
        m_axi_A_port_BVALID,
        m_axi_A_port_BREADY,
        m_axi_A_port_BRESP,
        m_axi_A_port_BID,
        m_axi_A_port_BUSER,
        m_axi_B_port_AWVALID,
        m_axi_B_port_AWREADY,
        m_axi_B_port_AWADDR,
        m_axi_B_port_AWID,
        m_axi_B_port_AWLEN,
        m_axi_B_port_AWSIZE,
        m_axi_B_port_AWBURST,
        m_axi_B_port_AWLOCK,
        m_axi_B_port_AWCACHE,
        m_axi_B_port_AWPROT,
        m_axi_B_port_AWQOS,
        m_axi_B_port_AWREGION,
        m_axi_B_port_AWUSER,
        m_axi_B_port_WVALID,
        m_axi_B_port_WREADY,
        m_axi_B_port_WDATA,
        m_axi_B_port_WSTRB,
        m_axi_B_port_WLAST,
        m_axi_B_port_WID,
        m_axi_B_port_WUSER,
        m_axi_B_port_ARVALID,
        m_axi_B_port_ARREADY,
        m_axi_B_port_ARADDR,
        m_axi_B_port_ARID,
        m_axi_B_port_ARLEN,
        m_axi_B_port_ARSIZE,
        m_axi_B_port_ARBURST,
        m_axi_B_port_ARLOCK,
        m_axi_B_port_ARCACHE,
        m_axi_B_port_ARPROT,
        m_axi_B_port_ARQOS,
        m_axi_B_port_ARREGION,
        m_axi_B_port_ARUSER,
        m_axi_B_port_RVALID,
        m_axi_B_port_RREADY,
        m_axi_B_port_RDATA,
        m_axi_B_port_RLAST,
        m_axi_B_port_RID,
        m_axi_B_port_RUSER,
        m_axi_B_port_RRESP,
        m_axi_B_port_BVALID,
        m_axi_B_port_BREADY,
        m_axi_B_port_BRESP,
        m_axi_B_port_BID,
        m_axi_B_port_BUSER,
        m_axi_C_port_AWVALID,
        m_axi_C_port_AWREADY,
        m_axi_C_port_AWADDR,
        m_axi_C_port_AWID,
        m_axi_C_port_AWLEN,
        m_axi_C_port_AWSIZE,
        m_axi_C_port_AWBURST,
        m_axi_C_port_AWLOCK,
        m_axi_C_port_AWCACHE,
        m_axi_C_port_AWPROT,
        m_axi_C_port_AWQOS,
        m_axi_C_port_AWREGION,
        m_axi_C_port_AWUSER,
        m_axi_C_port_WVALID,
        m_axi_C_port_WREADY,
        m_axi_C_port_WDATA,
        m_axi_C_port_WSTRB,
        m_axi_C_port_WLAST,
        m_axi_C_port_WID,
        m_axi_C_port_WUSER,
        m_axi_C_port_ARVALID,
        m_axi_C_port_ARREADY,
        m_axi_C_port_ARADDR,
        m_axi_C_port_ARID,
        m_axi_C_port_ARLEN,
        m_axi_C_port_ARSIZE,
        m_axi_C_port_ARBURST,
        m_axi_C_port_ARLOCK,
        m_axi_C_port_ARCACHE,
        m_axi_C_port_ARPROT,
        m_axi_C_port_ARQOS,
        m_axi_C_port_ARREGION,
        m_axi_C_port_ARUSER,
        m_axi_C_port_RVALID,
        m_axi_C_port_RREADY,
        m_axi_C_port_RDATA,
        m_axi_C_port_RLAST,
        m_axi_C_port_RID,
        m_axi_C_port_RUSER,
        m_axi_C_port_RRESP,
        m_axi_C_port_BVALID,
        m_axi_C_port_BREADY,
        m_axi_C_port_BRESP,
        m_axi_C_port_BID,
        m_axi_C_port_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_A_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_A_PORT_ADDR_WIDTH = 64;
parameter    C_M_AXI_A_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_A_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_A_PORT_USER_VALUE = 0;
parameter    C_M_AXI_A_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_A_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_B_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_B_PORT_ADDR_WIDTH = 64;
parameter    C_M_AXI_B_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_B_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_B_PORT_USER_VALUE = 0;
parameter    C_M_AXI_B_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_B_PORT_CACHE_VALUE = 3;
parameter    C_M_AXI_C_PORT_ID_WIDTH = 1;
parameter    C_M_AXI_C_PORT_ADDR_WIDTH = 64;
parameter    C_M_AXI_C_PORT_DATA_WIDTH = 32;
parameter    C_M_AXI_C_PORT_AWUSER_WIDTH = 1;
parameter    C_M_AXI_C_PORT_ARUSER_WIDTH = 1;
parameter    C_M_AXI_C_PORT_WUSER_WIDTH = 1;
parameter    C_M_AXI_C_PORT_RUSER_WIDTH = 1;
parameter    C_M_AXI_C_PORT_BUSER_WIDTH = 1;
parameter    C_M_AXI_C_PORT_USER_VALUE = 0;
parameter    C_M_AXI_C_PORT_PROT_VALUE = 0;
parameter    C_M_AXI_C_PORT_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_A_PORT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_B_PORT_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_C_PORT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_A_port_AWVALID;
input   m_axi_A_port_AWREADY;
output  [C_M_AXI_A_PORT_ADDR_WIDTH - 1:0] m_axi_A_port_AWADDR;
output  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_AWID;
output  [7:0] m_axi_A_port_AWLEN;
output  [2:0] m_axi_A_port_AWSIZE;
output  [1:0] m_axi_A_port_AWBURST;
output  [1:0] m_axi_A_port_AWLOCK;
output  [3:0] m_axi_A_port_AWCACHE;
output  [2:0] m_axi_A_port_AWPROT;
output  [3:0] m_axi_A_port_AWQOS;
output  [3:0] m_axi_A_port_AWREGION;
output  [C_M_AXI_A_PORT_AWUSER_WIDTH - 1:0] m_axi_A_port_AWUSER;
output   m_axi_A_port_WVALID;
input   m_axi_A_port_WREADY;
output  [C_M_AXI_A_PORT_DATA_WIDTH - 1:0] m_axi_A_port_WDATA;
output  [C_M_AXI_A_PORT_WSTRB_WIDTH - 1:0] m_axi_A_port_WSTRB;
output   m_axi_A_port_WLAST;
output  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_WID;
output  [C_M_AXI_A_PORT_WUSER_WIDTH - 1:0] m_axi_A_port_WUSER;
output   m_axi_A_port_ARVALID;
input   m_axi_A_port_ARREADY;
output  [C_M_AXI_A_PORT_ADDR_WIDTH - 1:0] m_axi_A_port_ARADDR;
output  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_ARID;
output  [7:0] m_axi_A_port_ARLEN;
output  [2:0] m_axi_A_port_ARSIZE;
output  [1:0] m_axi_A_port_ARBURST;
output  [1:0] m_axi_A_port_ARLOCK;
output  [3:0] m_axi_A_port_ARCACHE;
output  [2:0] m_axi_A_port_ARPROT;
output  [3:0] m_axi_A_port_ARQOS;
output  [3:0] m_axi_A_port_ARREGION;
output  [C_M_AXI_A_PORT_ARUSER_WIDTH - 1:0] m_axi_A_port_ARUSER;
input   m_axi_A_port_RVALID;
output   m_axi_A_port_RREADY;
input  [C_M_AXI_A_PORT_DATA_WIDTH - 1:0] m_axi_A_port_RDATA;
input   m_axi_A_port_RLAST;
input  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_RID;
input  [C_M_AXI_A_PORT_RUSER_WIDTH - 1:0] m_axi_A_port_RUSER;
input  [1:0] m_axi_A_port_RRESP;
input   m_axi_A_port_BVALID;
output   m_axi_A_port_BREADY;
input  [1:0] m_axi_A_port_BRESP;
input  [C_M_AXI_A_PORT_ID_WIDTH - 1:0] m_axi_A_port_BID;
input  [C_M_AXI_A_PORT_BUSER_WIDTH - 1:0] m_axi_A_port_BUSER;
output   m_axi_B_port_AWVALID;
input   m_axi_B_port_AWREADY;
output  [C_M_AXI_B_PORT_ADDR_WIDTH - 1:0] m_axi_B_port_AWADDR;
output  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_AWID;
output  [7:0] m_axi_B_port_AWLEN;
output  [2:0] m_axi_B_port_AWSIZE;
output  [1:0] m_axi_B_port_AWBURST;
output  [1:0] m_axi_B_port_AWLOCK;
output  [3:0] m_axi_B_port_AWCACHE;
output  [2:0] m_axi_B_port_AWPROT;
output  [3:0] m_axi_B_port_AWQOS;
output  [3:0] m_axi_B_port_AWREGION;
output  [C_M_AXI_B_PORT_AWUSER_WIDTH - 1:0] m_axi_B_port_AWUSER;
output   m_axi_B_port_WVALID;
input   m_axi_B_port_WREADY;
output  [C_M_AXI_B_PORT_DATA_WIDTH - 1:0] m_axi_B_port_WDATA;
output  [C_M_AXI_B_PORT_WSTRB_WIDTH - 1:0] m_axi_B_port_WSTRB;
output   m_axi_B_port_WLAST;
output  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_WID;
output  [C_M_AXI_B_PORT_WUSER_WIDTH - 1:0] m_axi_B_port_WUSER;
output   m_axi_B_port_ARVALID;
input   m_axi_B_port_ARREADY;
output  [C_M_AXI_B_PORT_ADDR_WIDTH - 1:0] m_axi_B_port_ARADDR;
output  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_ARID;
output  [7:0] m_axi_B_port_ARLEN;
output  [2:0] m_axi_B_port_ARSIZE;
output  [1:0] m_axi_B_port_ARBURST;
output  [1:0] m_axi_B_port_ARLOCK;
output  [3:0] m_axi_B_port_ARCACHE;
output  [2:0] m_axi_B_port_ARPROT;
output  [3:0] m_axi_B_port_ARQOS;
output  [3:0] m_axi_B_port_ARREGION;
output  [C_M_AXI_B_PORT_ARUSER_WIDTH - 1:0] m_axi_B_port_ARUSER;
input   m_axi_B_port_RVALID;
output   m_axi_B_port_RREADY;
input  [C_M_AXI_B_PORT_DATA_WIDTH - 1:0] m_axi_B_port_RDATA;
input   m_axi_B_port_RLAST;
input  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_RID;
input  [C_M_AXI_B_PORT_RUSER_WIDTH - 1:0] m_axi_B_port_RUSER;
input  [1:0] m_axi_B_port_RRESP;
input   m_axi_B_port_BVALID;
output   m_axi_B_port_BREADY;
input  [1:0] m_axi_B_port_BRESP;
input  [C_M_AXI_B_PORT_ID_WIDTH - 1:0] m_axi_B_port_BID;
input  [C_M_AXI_B_PORT_BUSER_WIDTH - 1:0] m_axi_B_port_BUSER;
output   m_axi_C_port_AWVALID;
input   m_axi_C_port_AWREADY;
output  [C_M_AXI_C_PORT_ADDR_WIDTH - 1:0] m_axi_C_port_AWADDR;
output  [C_M_AXI_C_PORT_ID_WIDTH - 1:0] m_axi_C_port_AWID;
output  [7:0] m_axi_C_port_AWLEN;
output  [2:0] m_axi_C_port_AWSIZE;
output  [1:0] m_axi_C_port_AWBURST;
output  [1:0] m_axi_C_port_AWLOCK;
output  [3:0] m_axi_C_port_AWCACHE;
output  [2:0] m_axi_C_port_AWPROT;
output  [3:0] m_axi_C_port_AWQOS;
output  [3:0] m_axi_C_port_AWREGION;
output  [C_M_AXI_C_PORT_AWUSER_WIDTH - 1:0] m_axi_C_port_AWUSER;
output   m_axi_C_port_WVALID;
input   m_axi_C_port_WREADY;
output  [C_M_AXI_C_PORT_DATA_WIDTH - 1:0] m_axi_C_port_WDATA;
output  [C_M_AXI_C_PORT_WSTRB_WIDTH - 1:0] m_axi_C_port_WSTRB;
output   m_axi_C_port_WLAST;
output  [C_M_AXI_C_PORT_ID_WIDTH - 1:0] m_axi_C_port_WID;
output  [C_M_AXI_C_PORT_WUSER_WIDTH - 1:0] m_axi_C_port_WUSER;
output   m_axi_C_port_ARVALID;
input   m_axi_C_port_ARREADY;
output  [C_M_AXI_C_PORT_ADDR_WIDTH - 1:0] m_axi_C_port_ARADDR;
output  [C_M_AXI_C_PORT_ID_WIDTH - 1:0] m_axi_C_port_ARID;
output  [7:0] m_axi_C_port_ARLEN;
output  [2:0] m_axi_C_port_ARSIZE;
output  [1:0] m_axi_C_port_ARBURST;
output  [1:0] m_axi_C_port_ARLOCK;
output  [3:0] m_axi_C_port_ARCACHE;
output  [2:0] m_axi_C_port_ARPROT;
output  [3:0] m_axi_C_port_ARQOS;
output  [3:0] m_axi_C_port_ARREGION;
output  [C_M_AXI_C_PORT_ARUSER_WIDTH - 1:0] m_axi_C_port_ARUSER;
input   m_axi_C_port_RVALID;
output   m_axi_C_port_RREADY;
input  [C_M_AXI_C_PORT_DATA_WIDTH - 1:0] m_axi_C_port_RDATA;
input   m_axi_C_port_RLAST;
input  [C_M_AXI_C_PORT_ID_WIDTH - 1:0] m_axi_C_port_RID;
input  [C_M_AXI_C_PORT_RUSER_WIDTH - 1:0] m_axi_C_port_RUSER;
input  [1:0] m_axi_C_port_RRESP;
input   m_axi_C_port_BVALID;
output   m_axi_C_port_BREADY;
input  [1:0] m_axi_C_port_BRESP;
input  [C_M_AXI_C_PORT_ID_WIDTH - 1:0] m_axi_C_port_BID;
input  [C_M_AXI_C_PORT_BUSER_WIDTH - 1:0] m_axi_C_port_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] C;
reg    A_port_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    B_port_blk_n_AR;
reg    C_port_blk_n_AW;
wire    ap_CS_fsm_state12;
reg    C_port_blk_n_B;
wire    ap_CS_fsm_state19;
reg   [61:0] trunc_ln_reg_221;
reg   [61:0] trunc_ln1_reg_227;
reg   [61:0] trunc_ln2_reg_233;
reg   [5:0] a_buffer_address0;
reg    a_buffer_ce0;
reg    a_buffer_we0;
wire   [31:0] a_buffer_q0;
reg    a_buffer_ce1;
wire   [31:0] a_buffer_q1;
reg    a_buffer_ce2;
wire   [31:0] a_buffer_q2;
reg    a_buffer_ce3;
wire   [31:0] a_buffer_q3;
reg    a_buffer_ce4;
wire   [31:0] a_buffer_q4;
reg    a_buffer_ce5;
wire   [31:0] a_buffer_q5;
reg    a_buffer_ce6;
wire   [31:0] a_buffer_q6;
reg    a_buffer_ce7;
wire   [31:0] a_buffer_q7;
reg   [5:0] b_buffer_address0;
reg    b_buffer_ce0;
reg    b_buffer_we0;
wire   [31:0] b_buffer_q0;
reg    b_buffer_ce1;
wire   [31:0] b_buffer_q1;
reg    b_buffer_ce2;
wire   [31:0] b_buffer_q2;
reg    b_buffer_ce3;
wire   [31:0] b_buffer_q3;
reg    b_buffer_ce4;
wire   [31:0] b_buffer_q4;
reg    b_buffer_ce5;
wire   [31:0] b_buffer_q5;
reg    b_buffer_ce6;
wire   [31:0] b_buffer_q6;
reg    b_buffer_ce7;
wire   [31:0] b_buffer_q7;
reg   [5:0] c_buffer_address0;
reg    c_buffer_ce0;
reg    c_buffer_we0;
wire   [31:0] c_buffer_q0;
wire    grp_mmult_Pipeline_1_fu_130_ap_start;
wire    grp_mmult_Pipeline_1_fu_130_ap_done;
wire    grp_mmult_Pipeline_1_fu_130_ap_idle;
wire    grp_mmult_Pipeline_1_fu_130_ap_ready;
wire    grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWVALID;
wire   [63:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWADDR;
wire   [0:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWID;
wire   [31:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWLEN;
wire   [2:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWSIZE;
wire   [1:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWBURST;
wire   [1:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWLOCK;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWCACHE;
wire   [2:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWPROT;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWQOS;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWREGION;
wire   [0:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWUSER;
wire    grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WVALID;
wire   [31:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WDATA;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WSTRB;
wire    grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WLAST;
wire   [0:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WID;
wire   [0:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WUSER;
wire    grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARVALID;
wire   [63:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARADDR;
wire   [0:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARID;
wire   [31:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARLEN;
wire   [2:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARSIZE;
wire   [1:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARBURST;
wire   [1:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARLOCK;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARCACHE;
wire   [2:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARPROT;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARQOS;
wire   [3:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARREGION;
wire   [0:0] grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARUSER;
wire    grp_mmult_Pipeline_1_fu_130_m_axi_A_port_RREADY;
wire    grp_mmult_Pipeline_1_fu_130_m_axi_A_port_BREADY;
wire   [5:0] grp_mmult_Pipeline_1_fu_130_a_buffer_address0;
wire    grp_mmult_Pipeline_1_fu_130_a_buffer_ce0;
wire    grp_mmult_Pipeline_1_fu_130_a_buffer_we0;
wire   [31:0] grp_mmult_Pipeline_1_fu_130_a_buffer_d0;
wire    grp_mmult_Pipeline_2_fu_138_ap_start;
wire    grp_mmult_Pipeline_2_fu_138_ap_done;
wire    grp_mmult_Pipeline_2_fu_138_ap_idle;
wire    grp_mmult_Pipeline_2_fu_138_ap_ready;
wire    grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWVALID;
wire   [63:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWADDR;
wire   [0:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWID;
wire   [31:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWLEN;
wire   [2:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWSIZE;
wire   [1:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWBURST;
wire   [1:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWLOCK;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWCACHE;
wire   [2:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWPROT;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWQOS;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWREGION;
wire   [0:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWUSER;
wire    grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WVALID;
wire   [31:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WDATA;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WSTRB;
wire    grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WLAST;
wire   [0:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WID;
wire   [0:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WUSER;
wire    grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARVALID;
wire   [63:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARADDR;
wire   [0:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARID;
wire   [31:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARLEN;
wire   [2:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARSIZE;
wire   [1:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARBURST;
wire   [1:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARLOCK;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARCACHE;
wire   [2:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARPROT;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARQOS;
wire   [3:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARREGION;
wire   [0:0] grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARUSER;
wire    grp_mmult_Pipeline_2_fu_138_m_axi_B_port_RREADY;
wire    grp_mmult_Pipeline_2_fu_138_m_axi_B_port_BREADY;
wire   [5:0] grp_mmult_Pipeline_2_fu_138_b_buffer_address0;
wire    grp_mmult_Pipeline_2_fu_138_b_buffer_ce0;
wire    grp_mmult_Pipeline_2_fu_138_b_buffer_we0;
wire   [31:0] grp_mmult_Pipeline_2_fu_138_b_buffer_d0;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_idle;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_ready;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address0;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce0;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address1;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce1;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address2;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce2;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address3;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce3;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address4;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce4;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address5;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce5;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address6;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce6;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address7;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce7;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address0;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce0;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address1;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce1;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address2;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce2;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address3;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce3;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address4;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce4;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address5;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce5;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address6;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce6;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address7;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce7;
wire   [5:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_address0;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_ce0;
wire    grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_we0;
wire   [31:0] grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_d0;
wire    grp_mmult_Pipeline_4_fu_153_ap_start;
wire    grp_mmult_Pipeline_4_fu_153_ap_done;
wire    grp_mmult_Pipeline_4_fu_153_ap_idle;
wire    grp_mmult_Pipeline_4_fu_153_ap_ready;
wire    grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWVALID;
wire   [63:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWADDR;
wire   [0:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWID;
wire   [31:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWLEN;
wire   [2:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWSIZE;
wire   [1:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWBURST;
wire   [1:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWLOCK;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWCACHE;
wire   [2:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWPROT;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWQOS;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWREGION;
wire   [0:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWUSER;
wire    grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WVALID;
wire   [31:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WDATA;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WSTRB;
wire    grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WLAST;
wire   [0:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WID;
wire   [0:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WUSER;
wire    grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARVALID;
wire   [63:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARADDR;
wire   [0:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARID;
wire   [31:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARLEN;
wire   [2:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARSIZE;
wire   [1:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARBURST;
wire   [1:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARLOCK;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARCACHE;
wire   [2:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARPROT;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARQOS;
wire   [3:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARREGION;
wire   [0:0] grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARUSER;
wire    grp_mmult_Pipeline_4_fu_153_m_axi_C_port_RREADY;
wire    grp_mmult_Pipeline_4_fu_153_m_axi_C_port_BREADY;
wire   [5:0] grp_mmult_Pipeline_4_fu_153_c_buffer_address0;
wire    grp_mmult_Pipeline_4_fu_153_c_buffer_ce0;
wire    A_port_AWREADY;
wire    A_port_WREADY;
reg    A_port_ARVALID;
wire    A_port_ARREADY;
reg   [63:0] A_port_ARADDR;
reg   [31:0] A_port_ARLEN;
wire    A_port_RVALID;
reg    A_port_RREADY;
wire   [31:0] A_port_RDATA;
wire   [8:0] A_port_RFIFONUM;
wire    A_port_BVALID;
wire    B_port_AWREADY;
wire    B_port_WREADY;
reg    B_port_ARVALID;
wire    B_port_ARREADY;
reg   [63:0] B_port_ARADDR;
reg   [31:0] B_port_ARLEN;
wire    B_port_RVALID;
reg    B_port_RREADY;
wire   [31:0] B_port_RDATA;
wire   [8:0] B_port_RFIFONUM;
wire    B_port_BVALID;
reg    C_port_AWVALID;
wire    C_port_AWREADY;
reg   [63:0] C_port_AWADDR;
reg   [31:0] C_port_AWLEN;
reg    C_port_WVALID;
wire    C_port_WREADY;
wire    C_port_ARREADY;
wire    C_port_RVALID;
wire   [31:0] C_port_RDATA;
wire   [8:0] C_port_RFIFONUM;
wire    C_port_BVALID;
reg    C_port_BREADY;
reg    grp_mmult_Pipeline_1_fu_130_ap_start_reg;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg    grp_mmult_Pipeline_2_fu_138_ap_start_reg;
reg    grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start_reg;
wire    ap_CS_fsm_state11;
reg    grp_mmult_Pipeline_4_fu_153_ap_start_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire  signed [63:0] sext_ln19_fu_191_p1;
wire  signed [63:0] sext_ln20_fu_201_p1;
wire  signed [63:0] sext_ln30_fu_211_p1;
reg    ap_block_state2_io;
reg   [18:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_block_state10_on_subcall_done;
reg    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
reg    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 grp_mmult_Pipeline_1_fu_130_ap_start_reg = 1'b0;
#0 grp_mmult_Pipeline_2_fu_138_ap_start_reg = 1'b0;
#0 grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start_reg = 1'b0;
#0 grp_mmult_Pipeline_4_fu_153_ap_start_reg = 1'b0;
end

mmult_a_buffer_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
a_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_buffer_address0),
    .ce0(a_buffer_ce0),
    .we0(a_buffer_we0),
    .d0(grp_mmult_Pipeline_1_fu_130_a_buffer_d0),
    .q0(a_buffer_q0),
    .address1(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address1),
    .ce1(a_buffer_ce1),
    .q1(a_buffer_q1),
    .address2(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address2),
    .ce2(a_buffer_ce2),
    .q2(a_buffer_q2),
    .address3(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address3),
    .ce3(a_buffer_ce3),
    .q3(a_buffer_q3),
    .address4(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address4),
    .ce4(a_buffer_ce4),
    .q4(a_buffer_q4),
    .address5(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address5),
    .ce5(a_buffer_ce5),
    .q5(a_buffer_q5),
    .address6(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address6),
    .ce6(a_buffer_ce6),
    .q6(a_buffer_q6),
    .address7(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address7),
    .ce7(a_buffer_ce7),
    .q7(a_buffer_q7)
);

mmult_a_buffer_RAM_1WNR_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
b_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(b_buffer_address0),
    .ce0(b_buffer_ce0),
    .we0(b_buffer_we0),
    .d0(grp_mmult_Pipeline_2_fu_138_b_buffer_d0),
    .q0(b_buffer_q0),
    .address1(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address1),
    .ce1(b_buffer_ce1),
    .q1(b_buffer_q1),
    .address2(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address2),
    .ce2(b_buffer_ce2),
    .q2(b_buffer_q2),
    .address3(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address3),
    .ce3(b_buffer_ce3),
    .q3(b_buffer_q3),
    .address4(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address4),
    .ce4(b_buffer_ce4),
    .q4(b_buffer_q4),
    .address5(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address5),
    .ce5(b_buffer_ce5),
    .q5(b_buffer_q5),
    .address6(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address6),
    .ce6(b_buffer_ce6),
    .q6(b_buffer_q6),
    .address7(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address7),
    .ce7(b_buffer_ce7),
    .q7(b_buffer_q7)
);

mmult_c_buffer_RAM_AUTO_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
c_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(c_buffer_address0),
    .ce0(c_buffer_ce0),
    .we0(c_buffer_we0),
    .d0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_d0),
    .q0(c_buffer_q0)
);

mmult_mmult_Pipeline_1 grp_mmult_Pipeline_1_fu_130(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mmult_Pipeline_1_fu_130_ap_start),
    .ap_done(grp_mmult_Pipeline_1_fu_130_ap_done),
    .ap_idle(grp_mmult_Pipeline_1_fu_130_ap_idle),
    .ap_ready(grp_mmult_Pipeline_1_fu_130_ap_ready),
    .m_axi_A_port_AWVALID(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWVALID),
    .m_axi_A_port_AWREADY(1'b0),
    .m_axi_A_port_AWADDR(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWADDR),
    .m_axi_A_port_AWID(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWID),
    .m_axi_A_port_AWLEN(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWLEN),
    .m_axi_A_port_AWSIZE(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWSIZE),
    .m_axi_A_port_AWBURST(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWBURST),
    .m_axi_A_port_AWLOCK(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWLOCK),
    .m_axi_A_port_AWCACHE(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWCACHE),
    .m_axi_A_port_AWPROT(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWPROT),
    .m_axi_A_port_AWQOS(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWQOS),
    .m_axi_A_port_AWREGION(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWREGION),
    .m_axi_A_port_AWUSER(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_AWUSER),
    .m_axi_A_port_WVALID(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WVALID),
    .m_axi_A_port_WREADY(1'b0),
    .m_axi_A_port_WDATA(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WDATA),
    .m_axi_A_port_WSTRB(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WSTRB),
    .m_axi_A_port_WLAST(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WLAST),
    .m_axi_A_port_WID(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WID),
    .m_axi_A_port_WUSER(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_WUSER),
    .m_axi_A_port_ARVALID(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARVALID),
    .m_axi_A_port_ARREADY(A_port_ARREADY),
    .m_axi_A_port_ARADDR(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARADDR),
    .m_axi_A_port_ARID(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARID),
    .m_axi_A_port_ARLEN(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARLEN),
    .m_axi_A_port_ARSIZE(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARSIZE),
    .m_axi_A_port_ARBURST(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARBURST),
    .m_axi_A_port_ARLOCK(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARLOCK),
    .m_axi_A_port_ARCACHE(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARCACHE),
    .m_axi_A_port_ARPROT(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARPROT),
    .m_axi_A_port_ARQOS(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARQOS),
    .m_axi_A_port_ARREGION(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARREGION),
    .m_axi_A_port_ARUSER(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARUSER),
    .m_axi_A_port_RVALID(A_port_RVALID),
    .m_axi_A_port_RREADY(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_RREADY),
    .m_axi_A_port_RDATA(A_port_RDATA),
    .m_axi_A_port_RLAST(1'b0),
    .m_axi_A_port_RID(1'd0),
    .m_axi_A_port_RFIFONUM(A_port_RFIFONUM),
    .m_axi_A_port_RUSER(1'd0),
    .m_axi_A_port_RRESP(2'd0),
    .m_axi_A_port_BVALID(1'b0),
    .m_axi_A_port_BREADY(grp_mmult_Pipeline_1_fu_130_m_axi_A_port_BREADY),
    .m_axi_A_port_BRESP(2'd0),
    .m_axi_A_port_BID(1'd0),
    .m_axi_A_port_BUSER(1'd0),
    .sext_ln19(trunc_ln_reg_221),
    .a_buffer_address0(grp_mmult_Pipeline_1_fu_130_a_buffer_address0),
    .a_buffer_ce0(grp_mmult_Pipeline_1_fu_130_a_buffer_ce0),
    .a_buffer_we0(grp_mmult_Pipeline_1_fu_130_a_buffer_we0),
    .a_buffer_d0(grp_mmult_Pipeline_1_fu_130_a_buffer_d0)
);

mmult_mmult_Pipeline_2 grp_mmult_Pipeline_2_fu_138(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mmult_Pipeline_2_fu_138_ap_start),
    .ap_done(grp_mmult_Pipeline_2_fu_138_ap_done),
    .ap_idle(grp_mmult_Pipeline_2_fu_138_ap_idle),
    .ap_ready(grp_mmult_Pipeline_2_fu_138_ap_ready),
    .m_axi_B_port_AWVALID(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWVALID),
    .m_axi_B_port_AWREADY(1'b0),
    .m_axi_B_port_AWADDR(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWADDR),
    .m_axi_B_port_AWID(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWID),
    .m_axi_B_port_AWLEN(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWLEN),
    .m_axi_B_port_AWSIZE(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWSIZE),
    .m_axi_B_port_AWBURST(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWBURST),
    .m_axi_B_port_AWLOCK(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWLOCK),
    .m_axi_B_port_AWCACHE(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWCACHE),
    .m_axi_B_port_AWPROT(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWPROT),
    .m_axi_B_port_AWQOS(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWQOS),
    .m_axi_B_port_AWREGION(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWREGION),
    .m_axi_B_port_AWUSER(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_AWUSER),
    .m_axi_B_port_WVALID(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WVALID),
    .m_axi_B_port_WREADY(1'b0),
    .m_axi_B_port_WDATA(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WDATA),
    .m_axi_B_port_WSTRB(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WSTRB),
    .m_axi_B_port_WLAST(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WLAST),
    .m_axi_B_port_WID(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WID),
    .m_axi_B_port_WUSER(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_WUSER),
    .m_axi_B_port_ARVALID(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARVALID),
    .m_axi_B_port_ARREADY(B_port_ARREADY),
    .m_axi_B_port_ARADDR(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARADDR),
    .m_axi_B_port_ARID(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARID),
    .m_axi_B_port_ARLEN(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARLEN),
    .m_axi_B_port_ARSIZE(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARSIZE),
    .m_axi_B_port_ARBURST(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARBURST),
    .m_axi_B_port_ARLOCK(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARLOCK),
    .m_axi_B_port_ARCACHE(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARCACHE),
    .m_axi_B_port_ARPROT(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARPROT),
    .m_axi_B_port_ARQOS(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARQOS),
    .m_axi_B_port_ARREGION(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARREGION),
    .m_axi_B_port_ARUSER(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARUSER),
    .m_axi_B_port_RVALID(B_port_RVALID),
    .m_axi_B_port_RREADY(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_RREADY),
    .m_axi_B_port_RDATA(B_port_RDATA),
    .m_axi_B_port_RLAST(1'b0),
    .m_axi_B_port_RID(1'd0),
    .m_axi_B_port_RFIFONUM(B_port_RFIFONUM),
    .m_axi_B_port_RUSER(1'd0),
    .m_axi_B_port_RRESP(2'd0),
    .m_axi_B_port_BVALID(1'b0),
    .m_axi_B_port_BREADY(grp_mmult_Pipeline_2_fu_138_m_axi_B_port_BREADY),
    .m_axi_B_port_BRESP(2'd0),
    .m_axi_B_port_BID(1'd0),
    .m_axi_B_port_BUSER(1'd0),
    .sext_ln20(trunc_ln1_reg_227),
    .b_buffer_address0(grp_mmult_Pipeline_2_fu_138_b_buffer_address0),
    .b_buffer_ce0(grp_mmult_Pipeline_2_fu_138_b_buffer_ce0),
    .b_buffer_we0(grp_mmult_Pipeline_2_fu_138_b_buffer_we0),
    .b_buffer_d0(grp_mmult_Pipeline_2_fu_138_b_buffer_d0)
);

mmult_mmult_Pipeline_mmult0_mmult1 grp_mmult_Pipeline_mmult0_mmult1_fu_146(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start),
    .ap_done(grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done),
    .ap_idle(grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_idle),
    .ap_ready(grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_ready),
    .a_buffer_address0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address0),
    .a_buffer_ce0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce0),
    .a_buffer_q0(a_buffer_q0),
    .a_buffer_address1(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address1),
    .a_buffer_ce1(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce1),
    .a_buffer_q1(a_buffer_q1),
    .a_buffer_address2(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address2),
    .a_buffer_ce2(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce2),
    .a_buffer_q2(a_buffer_q2),
    .a_buffer_address3(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address3),
    .a_buffer_ce3(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce3),
    .a_buffer_q3(a_buffer_q3),
    .a_buffer_address4(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address4),
    .a_buffer_ce4(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce4),
    .a_buffer_q4(a_buffer_q4),
    .a_buffer_address5(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address5),
    .a_buffer_ce5(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce5),
    .a_buffer_q5(a_buffer_q5),
    .a_buffer_address6(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address6),
    .a_buffer_ce6(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce6),
    .a_buffer_q6(a_buffer_q6),
    .a_buffer_address7(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address7),
    .a_buffer_ce7(grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce7),
    .a_buffer_q7(a_buffer_q7),
    .b_buffer_address0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address0),
    .b_buffer_ce0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce0),
    .b_buffer_q0(b_buffer_q0),
    .b_buffer_address1(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address1),
    .b_buffer_ce1(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce1),
    .b_buffer_q1(b_buffer_q1),
    .b_buffer_address2(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address2),
    .b_buffer_ce2(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce2),
    .b_buffer_q2(b_buffer_q2),
    .b_buffer_address3(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address3),
    .b_buffer_ce3(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce3),
    .b_buffer_q3(b_buffer_q3),
    .b_buffer_address4(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address4),
    .b_buffer_ce4(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce4),
    .b_buffer_q4(b_buffer_q4),
    .b_buffer_address5(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address5),
    .b_buffer_ce5(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce5),
    .b_buffer_q5(b_buffer_q5),
    .b_buffer_address6(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address6),
    .b_buffer_ce6(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce6),
    .b_buffer_q6(b_buffer_q6),
    .b_buffer_address7(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address7),
    .b_buffer_ce7(grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce7),
    .b_buffer_q7(b_buffer_q7),
    .c_buffer_address0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_address0),
    .c_buffer_ce0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_ce0),
    .c_buffer_we0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_we0),
    .c_buffer_d0(grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_d0)
);

mmult_mmult_Pipeline_4 grp_mmult_Pipeline_4_fu_153(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mmult_Pipeline_4_fu_153_ap_start),
    .ap_done(grp_mmult_Pipeline_4_fu_153_ap_done),
    .ap_idle(grp_mmult_Pipeline_4_fu_153_ap_idle),
    .ap_ready(grp_mmult_Pipeline_4_fu_153_ap_ready),
    .m_axi_C_port_AWVALID(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWVALID),
    .m_axi_C_port_AWREADY(C_port_AWREADY),
    .m_axi_C_port_AWADDR(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWADDR),
    .m_axi_C_port_AWID(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWID),
    .m_axi_C_port_AWLEN(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWLEN),
    .m_axi_C_port_AWSIZE(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWSIZE),
    .m_axi_C_port_AWBURST(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWBURST),
    .m_axi_C_port_AWLOCK(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWLOCK),
    .m_axi_C_port_AWCACHE(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWCACHE),
    .m_axi_C_port_AWPROT(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWPROT),
    .m_axi_C_port_AWQOS(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWQOS),
    .m_axi_C_port_AWREGION(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWREGION),
    .m_axi_C_port_AWUSER(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWUSER),
    .m_axi_C_port_WVALID(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WVALID),
    .m_axi_C_port_WREADY(C_port_WREADY),
    .m_axi_C_port_WDATA(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WDATA),
    .m_axi_C_port_WSTRB(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WSTRB),
    .m_axi_C_port_WLAST(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WLAST),
    .m_axi_C_port_WID(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WID),
    .m_axi_C_port_WUSER(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WUSER),
    .m_axi_C_port_ARVALID(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARVALID),
    .m_axi_C_port_ARREADY(1'b0),
    .m_axi_C_port_ARADDR(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARADDR),
    .m_axi_C_port_ARID(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARID),
    .m_axi_C_port_ARLEN(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARLEN),
    .m_axi_C_port_ARSIZE(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARSIZE),
    .m_axi_C_port_ARBURST(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARBURST),
    .m_axi_C_port_ARLOCK(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARLOCK),
    .m_axi_C_port_ARCACHE(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARCACHE),
    .m_axi_C_port_ARPROT(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARPROT),
    .m_axi_C_port_ARQOS(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARQOS),
    .m_axi_C_port_ARREGION(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARREGION),
    .m_axi_C_port_ARUSER(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_ARUSER),
    .m_axi_C_port_RVALID(1'b0),
    .m_axi_C_port_RREADY(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_RREADY),
    .m_axi_C_port_RDATA(32'd0),
    .m_axi_C_port_RLAST(1'b0),
    .m_axi_C_port_RID(1'd0),
    .m_axi_C_port_RFIFONUM(9'd0),
    .m_axi_C_port_RUSER(1'd0),
    .m_axi_C_port_RRESP(2'd0),
    .m_axi_C_port_BVALID(C_port_BVALID),
    .m_axi_C_port_BREADY(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_BREADY),
    .m_axi_C_port_BRESP(2'd0),
    .m_axi_C_port_BID(1'd0),
    .m_axi_C_port_BUSER(1'd0),
    .sext_ln30(trunc_ln2_reg_233),
    .c_buffer_address0(grp_mmult_Pipeline_4_fu_153_c_buffer_address0),
    .c_buffer_ce0(grp_mmult_Pipeline_4_fu_153_c_buffer_ce0),
    .c_buffer_q0(c_buffer_q0)
);

mmult_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .C(C)
);

mmult_A_port_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_A_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_A_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_A_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_A_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_A_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_A_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_A_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_A_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_A_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_A_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_A_PORT_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
A_port_m_axi_U(
    .AWVALID(m_axi_A_port_AWVALID),
    .AWREADY(m_axi_A_port_AWREADY),
    .AWADDR(m_axi_A_port_AWADDR),
    .AWID(m_axi_A_port_AWID),
    .AWLEN(m_axi_A_port_AWLEN),
    .AWSIZE(m_axi_A_port_AWSIZE),
    .AWBURST(m_axi_A_port_AWBURST),
    .AWLOCK(m_axi_A_port_AWLOCK),
    .AWCACHE(m_axi_A_port_AWCACHE),
    .AWPROT(m_axi_A_port_AWPROT),
    .AWQOS(m_axi_A_port_AWQOS),
    .AWREGION(m_axi_A_port_AWREGION),
    .AWUSER(m_axi_A_port_AWUSER),
    .WVALID(m_axi_A_port_WVALID),
    .WREADY(m_axi_A_port_WREADY),
    .WDATA(m_axi_A_port_WDATA),
    .WSTRB(m_axi_A_port_WSTRB),
    .WLAST(m_axi_A_port_WLAST),
    .WID(m_axi_A_port_WID),
    .WUSER(m_axi_A_port_WUSER),
    .ARVALID(m_axi_A_port_ARVALID),
    .ARREADY(m_axi_A_port_ARREADY),
    .ARADDR(m_axi_A_port_ARADDR),
    .ARID(m_axi_A_port_ARID),
    .ARLEN(m_axi_A_port_ARLEN),
    .ARSIZE(m_axi_A_port_ARSIZE),
    .ARBURST(m_axi_A_port_ARBURST),
    .ARLOCK(m_axi_A_port_ARLOCK),
    .ARCACHE(m_axi_A_port_ARCACHE),
    .ARPROT(m_axi_A_port_ARPROT),
    .ARQOS(m_axi_A_port_ARQOS),
    .ARREGION(m_axi_A_port_ARREGION),
    .ARUSER(m_axi_A_port_ARUSER),
    .RVALID(m_axi_A_port_RVALID),
    .RREADY(m_axi_A_port_RREADY),
    .RDATA(m_axi_A_port_RDATA),
    .RLAST(m_axi_A_port_RLAST),
    .RID(m_axi_A_port_RID),
    .RUSER(m_axi_A_port_RUSER),
    .RRESP(m_axi_A_port_RRESP),
    .BVALID(m_axi_A_port_BVALID),
    .BREADY(m_axi_A_port_BREADY),
    .BRESP(m_axi_A_port_BRESP),
    .BID(m_axi_A_port_BID),
    .BUSER(m_axi_A_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(A_port_ARVALID),
    .I_ARREADY(A_port_ARREADY),
    .I_ARADDR(A_port_ARADDR),
    .I_ARLEN(A_port_ARLEN),
    .I_RVALID(A_port_RVALID),
    .I_RREADY(A_port_RREADY),
    .I_RDATA(A_port_RDATA),
    .I_RFIFONUM(A_port_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(A_port_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(A_port_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(A_port_BVALID),
    .I_BREADY(1'b0)
);

mmult_B_port_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_B_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_B_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_B_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_B_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_B_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_B_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_B_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_B_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_B_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_B_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_B_PORT_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
B_port_m_axi_U(
    .AWVALID(m_axi_B_port_AWVALID),
    .AWREADY(m_axi_B_port_AWREADY),
    .AWADDR(m_axi_B_port_AWADDR),
    .AWID(m_axi_B_port_AWID),
    .AWLEN(m_axi_B_port_AWLEN),
    .AWSIZE(m_axi_B_port_AWSIZE),
    .AWBURST(m_axi_B_port_AWBURST),
    .AWLOCK(m_axi_B_port_AWLOCK),
    .AWCACHE(m_axi_B_port_AWCACHE),
    .AWPROT(m_axi_B_port_AWPROT),
    .AWQOS(m_axi_B_port_AWQOS),
    .AWREGION(m_axi_B_port_AWREGION),
    .AWUSER(m_axi_B_port_AWUSER),
    .WVALID(m_axi_B_port_WVALID),
    .WREADY(m_axi_B_port_WREADY),
    .WDATA(m_axi_B_port_WDATA),
    .WSTRB(m_axi_B_port_WSTRB),
    .WLAST(m_axi_B_port_WLAST),
    .WID(m_axi_B_port_WID),
    .WUSER(m_axi_B_port_WUSER),
    .ARVALID(m_axi_B_port_ARVALID),
    .ARREADY(m_axi_B_port_ARREADY),
    .ARADDR(m_axi_B_port_ARADDR),
    .ARID(m_axi_B_port_ARID),
    .ARLEN(m_axi_B_port_ARLEN),
    .ARSIZE(m_axi_B_port_ARSIZE),
    .ARBURST(m_axi_B_port_ARBURST),
    .ARLOCK(m_axi_B_port_ARLOCK),
    .ARCACHE(m_axi_B_port_ARCACHE),
    .ARPROT(m_axi_B_port_ARPROT),
    .ARQOS(m_axi_B_port_ARQOS),
    .ARREGION(m_axi_B_port_ARREGION),
    .ARUSER(m_axi_B_port_ARUSER),
    .RVALID(m_axi_B_port_RVALID),
    .RREADY(m_axi_B_port_RREADY),
    .RDATA(m_axi_B_port_RDATA),
    .RLAST(m_axi_B_port_RLAST),
    .RID(m_axi_B_port_RID),
    .RUSER(m_axi_B_port_RUSER),
    .RRESP(m_axi_B_port_RRESP),
    .BVALID(m_axi_B_port_BVALID),
    .BREADY(m_axi_B_port_BREADY),
    .BRESP(m_axi_B_port_BRESP),
    .BID(m_axi_B_port_BID),
    .BUSER(m_axi_B_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(B_port_ARVALID),
    .I_ARREADY(B_port_ARREADY),
    .I_ARADDR(B_port_ARADDR),
    .I_ARLEN(B_port_ARLEN),
    .I_RVALID(B_port_RVALID),
    .I_RREADY(B_port_RREADY),
    .I_RDATA(B_port_RDATA),
    .I_RFIFONUM(B_port_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(B_port_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(B_port_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(B_port_BVALID),
    .I_BREADY(1'b0)
);

mmult_C_port_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_C_PORT_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_C_PORT_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_C_PORT_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_C_PORT_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_C_PORT_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_C_PORT_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_C_PORT_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_C_PORT_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_C_PORT_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_C_PORT_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_C_PORT_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
C_port_m_axi_U(
    .AWVALID(m_axi_C_port_AWVALID),
    .AWREADY(m_axi_C_port_AWREADY),
    .AWADDR(m_axi_C_port_AWADDR),
    .AWID(m_axi_C_port_AWID),
    .AWLEN(m_axi_C_port_AWLEN),
    .AWSIZE(m_axi_C_port_AWSIZE),
    .AWBURST(m_axi_C_port_AWBURST),
    .AWLOCK(m_axi_C_port_AWLOCK),
    .AWCACHE(m_axi_C_port_AWCACHE),
    .AWPROT(m_axi_C_port_AWPROT),
    .AWQOS(m_axi_C_port_AWQOS),
    .AWREGION(m_axi_C_port_AWREGION),
    .AWUSER(m_axi_C_port_AWUSER),
    .WVALID(m_axi_C_port_WVALID),
    .WREADY(m_axi_C_port_WREADY),
    .WDATA(m_axi_C_port_WDATA),
    .WSTRB(m_axi_C_port_WSTRB),
    .WLAST(m_axi_C_port_WLAST),
    .WID(m_axi_C_port_WID),
    .WUSER(m_axi_C_port_WUSER),
    .ARVALID(m_axi_C_port_ARVALID),
    .ARREADY(m_axi_C_port_ARREADY),
    .ARADDR(m_axi_C_port_ARADDR),
    .ARID(m_axi_C_port_ARID),
    .ARLEN(m_axi_C_port_ARLEN),
    .ARSIZE(m_axi_C_port_ARSIZE),
    .ARBURST(m_axi_C_port_ARBURST),
    .ARLOCK(m_axi_C_port_ARLOCK),
    .ARCACHE(m_axi_C_port_ARCACHE),
    .ARPROT(m_axi_C_port_ARPROT),
    .ARQOS(m_axi_C_port_ARQOS),
    .ARREGION(m_axi_C_port_ARREGION),
    .ARUSER(m_axi_C_port_ARUSER),
    .RVALID(m_axi_C_port_RVALID),
    .RREADY(m_axi_C_port_RREADY),
    .RDATA(m_axi_C_port_RDATA),
    .RLAST(m_axi_C_port_RLAST),
    .RID(m_axi_C_port_RID),
    .RUSER(m_axi_C_port_RUSER),
    .RRESP(m_axi_C_port_RRESP),
    .BVALID(m_axi_C_port_BVALID),
    .BREADY(m_axi_C_port_BREADY),
    .BRESP(m_axi_C_port_BRESP),
    .BID(m_axi_C_port_BID),
    .BUSER(m_axi_C_port_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(C_port_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(C_port_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(C_port_RDATA),
    .I_RFIFONUM(C_port_RFIFONUM),
    .I_AWVALID(C_port_AWVALID),
    .I_AWREADY(C_port_AWREADY),
    .I_AWADDR(C_port_AWADDR),
    .I_AWLEN(C_port_AWLEN),
    .I_WVALID(C_port_WVALID),
    .I_WREADY(C_port_WREADY),
    .I_WDATA(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WDATA),
    .I_WSTRB(grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WSTRB),
    .I_BVALID(C_port_BVALID),
    .I_BREADY(C_port_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mmult_Pipeline_1_fu_130_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_mmult_Pipeline_1_fu_130_ap_start_reg <= 1'b1;
        end else if ((grp_mmult_Pipeline_1_fu_130_ap_ready == 1'b1)) begin
            grp_mmult_Pipeline_1_fu_130_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mmult_Pipeline_2_fu_138_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state9)) begin
            grp_mmult_Pipeline_2_fu_138_ap_start_reg <= 1'b1;
        end else if ((grp_mmult_Pipeline_2_fu_138_ap_ready == 1'b1)) begin
            grp_mmult_Pipeline_2_fu_138_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mmult_Pipeline_4_fu_153_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state13)) begin
            grp_mmult_Pipeline_4_fu_153_ap_start_reg <= 1'b1;
        end else if ((grp_mmult_Pipeline_4_fu_153_ap_ready == 1'b1)) begin
            grp_mmult_Pipeline_4_fu_153_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state11)) begin
            grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start_reg <= 1'b1;
        end else if ((grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_ready == 1'b1)) begin
            grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        trunc_ln1_reg_227 <= {{B[63:2]}};
        trunc_ln2_reg_233 <= {{C[63:2]}};
        trunc_ln_reg_221 <= {{A[63:2]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        A_port_ARADDR = sext_ln19_fu_191_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        A_port_ARADDR = grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARADDR;
    end else begin
        A_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        A_port_ARLEN = 32'd64;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        A_port_ARLEN = grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARLEN;
    end else begin
        A_port_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        A_port_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        A_port_ARVALID = grp_mmult_Pipeline_1_fu_130_m_axi_A_port_ARVALID;
    end else begin
        A_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        A_port_RREADY = grp_mmult_Pipeline_1_fu_130_m_axi_A_port_RREADY;
    end else begin
        A_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_port_blk_n_AR = m_axi_A_port_ARREADY;
    end else begin
        A_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        B_port_ARADDR = sext_ln20_fu_201_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        B_port_ARADDR = grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARADDR;
    end else begin
        B_port_ARADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        B_port_ARLEN = 32'd64;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        B_port_ARLEN = grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARLEN;
    end else begin
        B_port_ARLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
        B_port_ARVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        B_port_ARVALID = grp_mmult_Pipeline_2_fu_138_m_axi_B_port_ARVALID;
    end else begin
        B_port_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9))) begin
        B_port_RREADY = grp_mmult_Pipeline_2_fu_138_m_axi_B_port_RREADY;
    end else begin
        B_port_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_port_blk_n_AR = m_axi_B_port_ARREADY;
    end else begin
        B_port_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((~((grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done == 1'b0) | (1'b0 == C_port_AWREADY)) & (1'b1 == ap_CS_fsm_state12))) begin
        C_port_AWADDR = sext_ln30_fu_211_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        C_port_AWADDR = grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWADDR;
    end else begin
        C_port_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((~((grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done == 1'b0) | (1'b0 == C_port_AWREADY)) & (1'b1 == ap_CS_fsm_state12))) begin
        C_port_AWLEN = 32'd64;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        C_port_AWLEN = grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWLEN;
    end else begin
        C_port_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((~((grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done == 1'b0) | (1'b0 == C_port_AWREADY)) & (1'b1 == ap_CS_fsm_state12))) begin
        C_port_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        C_port_AWVALID = grp_mmult_Pipeline_4_fu_153_m_axi_C_port_AWVALID;
    end else begin
        C_port_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == C_port_BVALID) & (1'b1 == ap_CS_fsm_state19))) begin
        C_port_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        C_port_BREADY = grp_mmult_Pipeline_4_fu_153_m_axi_C_port_BREADY;
    end else begin
        C_port_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13))) begin
        C_port_WVALID = grp_mmult_Pipeline_4_fu_153_m_axi_C_port_WVALID;
    end else begin
        C_port_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        C_port_blk_n_AW = m_axi_C_port_AWREADY;
    end else begin
        C_port_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        C_port_blk_n_B = m_axi_C_port_BVALID;
    end else begin
        C_port_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_address0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        a_buffer_address0 = grp_mmult_Pipeline_1_fu_130_a_buffer_address0;
    end else begin
        a_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        a_buffer_ce0 = grp_mmult_Pipeline_1_fu_130_a_buffer_ce0;
    end else begin
        a_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce1 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce1;
    end else begin
        a_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce2 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce2;
    end else begin
        a_buffer_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce3 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce3;
    end else begin
        a_buffer_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce4 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce4;
    end else begin
        a_buffer_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce5 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce5;
    end else begin
        a_buffer_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce6 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce6;
    end else begin
        a_buffer_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        a_buffer_ce7 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_a_buffer_ce7;
    end else begin
        a_buffer_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        a_buffer_we0 = grp_mmult_Pipeline_1_fu_130_a_buffer_we0;
    end else begin
        a_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state10_on_subcall_done)) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

assign ap_ST_fsm_state11_blk = 1'b0;

always @ (*) begin
    if (((grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done == 1'b0) | (1'b0 == C_port_AWREADY))) begin
        ap_ST_fsm_state12_blk = 1'b1;
    end else begin
        ap_ST_fsm_state12_blk = 1'b0;
    end
end

assign ap_ST_fsm_state13_blk = 1'b0;

always @ (*) begin
    if ((grp_mmult_Pipeline_4_fu_153_ap_done == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((1'b0 == C_port_BVALID)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_io)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == C_port_BVALID) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == C_port_BVALID) & (1'b1 == ap_CS_fsm_state19))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_address0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_address0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        b_buffer_address0 = grp_mmult_Pipeline_2_fu_138_b_buffer_address0;
    end else begin
        b_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        b_buffer_ce0 = grp_mmult_Pipeline_2_fu_138_b_buffer_ce0;
    end else begin
        b_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce1 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce1;
    end else begin
        b_buffer_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce2 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce2;
    end else begin
        b_buffer_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce3 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce3;
    end else begin
        b_buffer_ce3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce4 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce4;
    end else begin
        b_buffer_ce4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce5 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce5;
    end else begin
        b_buffer_ce5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce6 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce6;
    end else begin
        b_buffer_ce6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        b_buffer_ce7 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_b_buffer_ce7;
    end else begin
        b_buffer_ce7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        b_buffer_we0 = grp_mmult_Pipeline_2_fu_138_b_buffer_we0;
    end else begin
        b_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        c_buffer_address0 = grp_mmult_Pipeline_4_fu_153_c_buffer_address0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        c_buffer_address0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_address0;
    end else begin
        c_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        c_buffer_ce0 = grp_mmult_Pipeline_4_fu_153_c_buffer_ce0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        c_buffer_ce0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_ce0;
    end else begin
        c_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        c_buffer_we0 = grp_mmult_Pipeline_mmult0_mmult1_fu_146_c_buffer_we0;
    end else begin
        c_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_io) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b0 == ap_block_state10_on_subcall_done) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            if ((~((grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_done == 1'b0) | (1'b0 == C_port_AWREADY)) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((grp_mmult_Pipeline_4_fu_153_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == C_port_BVALID) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state10_on_subcall_done = ((grp_mmult_Pipeline_2_fu_138_ap_done == 1'b0) | (grp_mmult_Pipeline_1_fu_130_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((1'b0 == B_port_ARREADY) | (1'b0 == A_port_ARREADY));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_mmult_Pipeline_1_fu_130_ap_start = grp_mmult_Pipeline_1_fu_130_ap_start_reg;

assign grp_mmult_Pipeline_2_fu_138_ap_start = grp_mmult_Pipeline_2_fu_138_ap_start_reg;

assign grp_mmult_Pipeline_4_fu_153_ap_start = grp_mmult_Pipeline_4_fu_153_ap_start_reg;

assign grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start = grp_mmult_Pipeline_mmult0_mmult1_fu_146_ap_start_reg;

assign sext_ln19_fu_191_p1 = $signed(trunc_ln_reg_221);

assign sext_ln20_fu_201_p1 = $signed(trunc_ln1_reg_227);

assign sext_ln30_fu_211_p1 = $signed(trunc_ln2_reg_233);

endmodule //mmult
