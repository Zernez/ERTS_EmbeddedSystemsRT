-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mmult_mmult_Pipeline_mmult0_mmult1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce0 : OUT STD_LOGIC;
    a_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce1 : OUT STD_LOGIC;
    a_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce2 : OUT STD_LOGIC;
    a_buffer_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce3 : OUT STD_LOGIC;
    a_buffer_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce4 : OUT STD_LOGIC;
    a_buffer_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce5 : OUT STD_LOGIC;
    a_buffer_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce6 : OUT STD_LOGIC;
    a_buffer_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_buffer_address7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    a_buffer_ce7 : OUT STD_LOGIC;
    a_buffer_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce0 : OUT STD_LOGIC;
    b_buffer_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce1 : OUT STD_LOGIC;
    b_buffer_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address2 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce2 : OUT STD_LOGIC;
    b_buffer_q2 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address3 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce3 : OUT STD_LOGIC;
    b_buffer_q3 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address4 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce4 : OUT STD_LOGIC;
    b_buffer_q4 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address5 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce5 : OUT STD_LOGIC;
    b_buffer_q5 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address6 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce6 : OUT STD_LOGIC;
    b_buffer_q6 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_buffer_address7 : OUT STD_LOGIC_VECTOR (5 downto 0);
    b_buffer_ce7 : OUT STD_LOGIC;
    b_buffer_q7 : IN STD_LOGIC_VECTOR (31 downto 0);
    c_buffer_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    c_buffer_ce0 : OUT STD_LOGIC;
    c_buffer_we0 : OUT STD_LOGIC;
    c_buffer_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of mmult_mmult_Pipeline_mmult0_mmult1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln22_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln24_fu_621_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_820 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_820_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_820_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_820_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_820_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln24_reg_820_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal a_buffer_load_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_1_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_2_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_3_reg_840 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_4_reg_845 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_5_reg_850 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_6_reg_855 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_buffer_load_7_reg_860 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_reg_865 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_1_reg_870 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_2_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_3_reg_880 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_4_reg_885 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_5_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_6_reg_895 : STD_LOGIC_VECTOR (31 downto 0);
    signal b_buffer_load_7_reg_900 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_1_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_656_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_2_reg_915 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_3_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_4_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_5_reg_930 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_6_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_676_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln26_7_reg_940 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_fu_680_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_reg_945 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_1_fu_684_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_1_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_5_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_5_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_6_fu_706_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_6_reg_960 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln22_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln26_1_fu_408_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_2_fu_427_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_fu_539_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_550_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_583_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_594_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_14_fu_605_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_15_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_58 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_fu_627_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_1_fu_361_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_66 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln22_1_fu_316_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln26_fu_298_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln22_fu_325_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln23_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_fu_341_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln22_fu_331_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln24_fu_369_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_cast_fu_353_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_cast_fu_302_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_2_fu_381_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_10_fu_394_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_fu_402_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_11_fu_413_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_1_fu_421_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_12_fu_432_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_2_fu_440_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_13_fu_451_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_3_fu_459_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_14_fu_470_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_4_fu_478_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_15_fu_489_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_5_fu_497_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_16_fu_508_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln22_6_fu_516_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_1_fu_349_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_531_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_fu_544_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_1_fu_555_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_2_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_3_fu_577_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_4_fu_588_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_5_fu_599_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln26_6_fu_610_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_373_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_8_fu_527_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_4_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_3_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_2_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mmult_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mmult_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U7 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_reg_865,
        din1 => a_buffer_load_reg_825,
        ce => ap_const_logic_1,
        dout => grp_fu_648_p2);

    mul_32s_32s_32_2_1_U8 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_1_reg_870,
        din1 => a_buffer_load_1_reg_830,
        ce => ap_const_logic_1,
        dout => grp_fu_652_p2);

    mul_32s_32s_32_2_1_U9 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_2_reg_875,
        din1 => a_buffer_load_2_reg_835,
        ce => ap_const_logic_1,
        dout => grp_fu_656_p2);

    mul_32s_32s_32_2_1_U10 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_3_reg_880,
        din1 => a_buffer_load_3_reg_840,
        ce => ap_const_logic_1,
        dout => grp_fu_660_p2);

    mul_32s_32s_32_2_1_U11 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_4_reg_885,
        din1 => a_buffer_load_4_reg_845,
        ce => ap_const_logic_1,
        dout => grp_fu_664_p2);

    mul_32s_32s_32_2_1_U12 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_5_reg_890,
        din1 => a_buffer_load_5_reg_850,
        ce => ap_const_logic_1,
        dout => grp_fu_668_p2);

    mul_32s_32s_32_2_1_U13 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_6_reg_895,
        din1 => a_buffer_load_6_reg_855,
        ce => ap_const_logic_1,
        dout => grp_fu_672_p2);

    mul_32s_32s_32_2_1_U14 : component mmult_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => b_buffer_load_7_reg_900,
        din1 => a_buffer_load_7_reg_860,
        ce => ap_const_logic_1,
        dout => grp_fu_676_p2);

    flow_control_loop_pipe_sequential_init_U : component mmult_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_310_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_62 <= select_ln22_1_fu_361_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_62 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_310_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_66 <= add_ln22_1_fu_316_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_66 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln22_fu_310_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_58 <= add_ln23_fu_627_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_58 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_buffer_load_1_reg_830 <= a_buffer_q6;
                a_buffer_load_2_reg_835 <= a_buffer_q5;
                a_buffer_load_3_reg_840 <= a_buffer_q4;
                a_buffer_load_4_reg_845 <= a_buffer_q3;
                a_buffer_load_5_reg_850 <= a_buffer_q2;
                a_buffer_load_6_reg_855 <= a_buffer_q1;
                a_buffer_load_7_reg_860 <= a_buffer_q0;
                a_buffer_load_reg_825 <= a_buffer_q7;
                b_buffer_load_1_reg_870 <= b_buffer_q6;
                b_buffer_load_2_reg_875 <= b_buffer_q5;
                b_buffer_load_3_reg_880 <= b_buffer_q4;
                b_buffer_load_4_reg_885 <= b_buffer_q3;
                b_buffer_load_5_reg_890 <= b_buffer_q2;
                b_buffer_load_6_reg_895 <= b_buffer_q1;
                b_buffer_load_7_reg_900 <= b_buffer_q0;
                b_buffer_load_reg_865 <= b_buffer_q7;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_310_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln24_reg_820 <= add_ln24_fu_621_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln24_reg_820_pp0_iter1_reg <= add_ln24_reg_820;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln24_reg_820_pp0_iter2_reg <= add_ln24_reg_820_pp0_iter1_reg;
                add_ln24_reg_820_pp0_iter3_reg <= add_ln24_reg_820_pp0_iter2_reg;
                add_ln24_reg_820_pp0_iter4_reg <= add_ln24_reg_820_pp0_iter3_reg;
                add_ln24_reg_820_pp0_iter5_reg <= add_ln24_reg_820_pp0_iter4_reg;
                add_ln26_1_reg_950 <= add_ln26_1_fu_684_p2;
                add_ln26_5_reg_955 <= add_ln26_5_fu_696_p2;
                add_ln26_6_reg_960 <= add_ln26_6_fu_706_p2;
                add_ln26_reg_945 <= add_ln26_fu_680_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                mul_ln26_1_reg_910 <= grp_fu_652_p2;
                mul_ln26_2_reg_915 <= grp_fu_656_p2;
                mul_ln26_3_reg_920 <= grp_fu_660_p2;
                mul_ln26_4_reg_925 <= grp_fu_664_p2;
                mul_ln26_5_reg_930 <= grp_fu_668_p2;
                mul_ln26_6_reg_935 <= grp_fu_672_p2;
                mul_ln26_7_reg_940 <= grp_fu_676_p2;
                mul_ln26_reg_905 <= grp_fu_648_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    a_buffer_address0 <= zext_ln26_7_fu_522_p1(6 - 1 downto 0);
    a_buffer_address1 <= zext_ln26_6_fu_503_p1(6 - 1 downto 0);
    a_buffer_address2 <= zext_ln26_5_fu_484_p1(6 - 1 downto 0);
    a_buffer_address3 <= zext_ln26_4_fu_465_p1(6 - 1 downto 0);
    a_buffer_address4 <= zext_ln26_3_fu_446_p1(6 - 1 downto 0);
    a_buffer_address5 <= zext_ln26_2_fu_427_p1(6 - 1 downto 0);
    a_buffer_address6 <= zext_ln26_1_fu_408_p1(6 - 1 downto 0);
    a_buffer_address7 <= zext_ln22_fu_389_p1(6 - 1 downto 0);

    a_buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce0 <= ap_const_logic_1;
        else 
            a_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce1 <= ap_const_logic_1;
        else 
            a_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce2 <= ap_const_logic_1;
        else 
            a_buffer_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce3 <= ap_const_logic_1;
        else 
            a_buffer_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce4 <= ap_const_logic_1;
        else 
            a_buffer_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce5 <= ap_const_logic_1;
        else 
            a_buffer_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce6 <= ap_const_logic_1;
        else 
            a_buffer_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    a_buffer_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            a_buffer_ce7 <= ap_const_logic_1;
        else 
            a_buffer_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln22_1_fu_316_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv7_1));
    add_ln22_fu_325_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln23_fu_627_p2 <= std_logic_vector(unsigned(select_ln22_fu_341_p3) + unsigned(ap_const_lv4_1));
    add_ln24_fu_621_p2 <= std_logic_vector(unsigned(tmp_s_fu_373_p3) + unsigned(zext_ln26_8_fu_527_p1));
    add_ln26_1_fu_684_p2 <= std_logic_vector(unsigned(mul_ln26_2_reg_915) + unsigned(mul_ln26_3_reg_920));
    add_ln26_2_fu_702_p2 <= std_logic_vector(unsigned(add_ln26_1_reg_950) + unsigned(add_ln26_reg_945));
    add_ln26_3_fu_688_p2 <= std_logic_vector(unsigned(mul_ln26_4_reg_925) + unsigned(mul_ln26_5_reg_930));
    add_ln26_4_fu_692_p2 <= std_logic_vector(unsigned(mul_ln26_6_reg_935) + unsigned(mul_ln26_7_reg_940));
    add_ln26_5_fu_696_p2 <= std_logic_vector(unsigned(add_ln26_4_fu_692_p2) + unsigned(add_ln26_3_fu_688_p2));
    add_ln26_6_fu_706_p2 <= std_logic_vector(unsigned(add_ln26_5_reg_955) + unsigned(add_ln26_2_fu_702_p2));
    add_ln26_fu_680_p2 <= std_logic_vector(unsigned(mul_ln26_1_reg_910) + unsigned(mul_ln26_reg_905));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln22_fu_310_p2)
    begin
        if (((icmp_ln22_fu_310_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_62;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_66)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_66;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_58, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_58;
        end if; 
    end process;

    b_buffer_address0 <= zext_ln26_15_fu_616_p1(6 - 1 downto 0);
    b_buffer_address1 <= zext_ln26_14_fu_605_p1(6 - 1 downto 0);
    b_buffer_address2 <= zext_ln26_13_fu_594_p1(6 - 1 downto 0);
    b_buffer_address3 <= zext_ln26_12_fu_583_p1(6 - 1 downto 0);
    b_buffer_address4 <= zext_ln26_11_fu_572_p1(6 - 1 downto 0);
    b_buffer_address5 <= zext_ln26_10_fu_561_p1(6 - 1 downto 0);
    b_buffer_address6 <= zext_ln26_9_fu_550_p1(6 - 1 downto 0);
    b_buffer_address7 <= zext_ln26_fu_539_p1(6 - 1 downto 0);

    b_buffer_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce0 <= ap_const_logic_1;
        else 
            b_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce1 <= ap_const_logic_1;
        else 
            b_buffer_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce2 <= ap_const_logic_1;
        else 
            b_buffer_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce3 <= ap_const_logic_1;
        else 
            b_buffer_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce4 <= ap_const_logic_1;
        else 
            b_buffer_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce5 <= ap_const_logic_1;
        else 
            b_buffer_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce6_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce6 <= ap_const_logic_1;
        else 
            b_buffer_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    b_buffer_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            b_buffer_ce7 <= ap_const_logic_1;
        else 
            b_buffer_ce7 <= ap_const_logic_0;
        end if; 
    end process;

    c_buffer_address0 <= zext_ln24_fu_711_p1(6 - 1 downto 0);

    c_buffer_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            c_buffer_ce0 <= ap_const_logic_1;
        else 
            c_buffer_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    c_buffer_d0 <= add_ln26_6_reg_960;

    c_buffer_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            c_buffer_we0 <= ap_const_logic_1;
        else 
            c_buffer_we0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln22_fu_310_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv7_40) else "0";
    icmp_ln23_fu_335_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv4_8) else "0";
    or_ln22_1_fu_421_p2 <= (select_ln22_11_fu_413_p3 or ap_const_lv6_2);
    or_ln22_2_fu_440_p2 <= (select_ln22_12_fu_432_p3 or ap_const_lv6_3);
    or_ln22_3_fu_459_p2 <= (select_ln22_13_fu_451_p3 or ap_const_lv6_4);
    or_ln22_4_fu_478_p2 <= (select_ln22_14_fu_470_p3 or ap_const_lv6_5);
    or_ln22_5_fu_497_p2 <= (select_ln22_15_fu_489_p3 or ap_const_lv6_6);
    or_ln22_6_fu_516_p2 <= (select_ln22_16_fu_508_p3 or ap_const_lv6_7);
    or_ln22_fu_402_p2 <= (select_ln22_10_fu_394_p3 or ap_const_lv6_1);
    or_ln26_1_fu_555_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_2);
    or_ln26_2_fu_566_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_3);
    or_ln26_3_fu_577_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_4);
    or_ln26_4_fu_588_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_5);
    or_ln26_5_fu_599_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_6);
    or_ln26_6_fu_610_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_7);
    or_ln26_fu_544_p2 <= (tmp_1_fu_531_p3 or ap_const_lv6_1);
    select_ln22_10_fu_394_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_11_fu_413_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_12_fu_432_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_13_fu_451_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_14_fu_470_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_15_fu_489_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_16_fu_508_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_1_fu_361_p3 <= 
        add_ln22_fu_325_p2 when (icmp_ln23_fu_335_p2(0) = '1') else 
        ap_sig_allocacmp_i_1;
    select_ln22_2_fu_381_p3 <= 
        tmp_10_cast_fu_353_p3 when (icmp_ln23_fu_335_p2(0) = '1') else 
        tmp_2_cast_fu_302_p3;
    select_ln22_fu_341_p3 <= 
        ap_const_lv4_0 when (icmp_ln23_fu_335_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    tmp_10_cast_fu_353_p3 <= (trunc_ln22_fu_331_p1 & ap_const_lv3_0);
    tmp_1_fu_531_p3 <= (trunc_ln26_1_fu_349_p1 & ap_const_lv3_0);
    tmp_2_cast_fu_302_p3 <= (trunc_ln26_fu_298_p1 & ap_const_lv3_0);
    tmp_s_fu_373_p3 <= (trunc_ln24_fu_369_p1 & ap_const_lv3_0);
    trunc_ln22_fu_331_p1 <= add_ln22_fu_325_p2(3 - 1 downto 0);
    trunc_ln24_fu_369_p1 <= select_ln22_1_fu_361_p3(3 - 1 downto 0);
    trunc_ln26_1_fu_349_p1 <= select_ln22_fu_341_p3(3 - 1 downto 0);
    trunc_ln26_fu_298_p1 <= ap_sig_allocacmp_i_1(3 - 1 downto 0);
    zext_ln22_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_2_fu_381_p3),64));
    zext_ln24_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_reg_820_pp0_iter5_reg),64));
    zext_ln26_10_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_1_fu_555_p2),64));
    zext_ln26_11_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_2_fu_566_p2),64));
    zext_ln26_12_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_3_fu_577_p2),64));
    zext_ln26_13_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_4_fu_588_p2),64));
    zext_ln26_14_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_5_fu_599_p2),64));
    zext_ln26_15_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_6_fu_610_p2),64));
    zext_ln26_1_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_fu_402_p2),64));
    zext_ln26_2_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_1_fu_421_p2),64));
    zext_ln26_3_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_2_fu_440_p2),64));
    zext_ln26_4_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_3_fu_459_p2),64));
    zext_ln26_5_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_4_fu_478_p2),64));
    zext_ln26_6_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_5_fu_497_p2),64));
    zext_ln26_7_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_6_fu_516_p2),64));
    zext_ln26_8_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_341_p3),6));
    zext_ln26_9_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_544_p2),64));
    zext_ln26_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_531_p3),64));
end behav;
