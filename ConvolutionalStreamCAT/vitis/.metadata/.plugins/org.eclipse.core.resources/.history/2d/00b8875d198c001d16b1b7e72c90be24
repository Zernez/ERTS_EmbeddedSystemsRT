#include "video_capture_paused.hpp"
#include "video_capture_streaming.hpp"

VideoCaptureState* VideoCapturePaused::instance_ = 0;

VideoCaptureState* VideoCapturePaused::Instance(){
	if(instance_ == 0)
		instance_ = new VideoCapturePaused;
	return instance_;
}

void VideoCapturePaused::Start(VideoCapture* context){
	//TODO: Setup Streaming

	/*
	 * Configure the VDMA to access a frame with the same dimensions as the
	 * current mode
	 */
	context->vdma_config_.VertSizeInput = videoPtr->timing.VActiveVideo;
	videoPtr->vdma_config_.HoriSizeInput = videoPtr->timing.HActiveVideo * 3;
	videoPtr->vdma_config_.FixedFrameStoreAddr = videoPtr->curFrame;

	ChangeState(context, VideoCaptureStreaming::Instance());
}

VideoCapturePaused::VideoCapturePaused(){

}

VideoCapturePaused::~VideoCapturePaused(){
	if(instance_ != 0)
		delete instance_;
}
