#include "video_capture.h"

#include "video_capture_disconnected.h"
#include "video_capture_state.h"


VideoCapture::VideoCapture(InterruptController* intc, XAxiVdma* vdma, u16 gpio_id, u16 vtc_id, u16 vtc_interrupt_id, u8* frame_ptr[NUM_FRAMES], u32 stride, bool start_on_detect) :
	state_(VideoCaptureDisconnected::Instance()),
	intc_(intc),
	vdma_(vdma),
	vtc_id_(vtc_id),
	vtc_interrupt_id_(vtc_interrupt_id),
	stride_(stride),
	current_frame_(0)
{
	for(int i=0; i < NUM_FRAMES; i++){
		frame_ptr_[i] = frame_ptr[i];
	}

	// Configure VDMA
	vdma_config_.FrameDelay = 0;
	vdma_config_.EnableCircularBuf = 1;
	vdma_config_.EnableSync = 0;
	vdma_config_.PointNum = 0;
	vdma_config_.EnableFrameCounter = 0;



	//TODO: Add failure state if anything goes wrong during initialization

	// Initialize GPIO
	XGpio_Initialize(&gpio_, gpio_id);
	XGpio_SelfTest(&gpio_);
	XGpio_DiscreteWrite(&gpio_, 1, 0);
	XGpio_SetDataDirection(&gpio_, 1, 0);
	XGpio_SetDataDirection(&gpio_, 2, 1);

	XGpio_InterruptEnable(&gpio_, XGPIO_IR_CH2_MASK);
	XGpio_InterruptGlobalEnable(&gpio_);

	XGpio_DiscreteWrite(&gpio_, 1, 1);
}

VideoCapture::~VideoCapture(){}

void VideoCapture::Start(){
	state_->Start(this);
}

void VideoCapture::Stop(){
	state_->Stop(this);
}

void VideoCapture::Connect(){
	state_->Connect(this);
}

void VideoCapture::Disconnect(){
	state_->Disconnect(this);
}

void VideoCapture::ChangeFrame(u32 frame_index){
	state_->ChangeFrame(this, frame_index);
}

void VideoCapture::ChangeState(VideoCaptureState* state){
	state_ = state;
}

XAxiVdma* VideoCapture::GetVdma(){
	return vdma_;
}

XAxiVdma_DmaSetup* VideoCapture::GetVdmaConfig(){
	return &vdma_config_;
}

XVtc* VideoCapture::GetVtc(){
	return &vtc_;
}

XVtc_Timing* VideoCapture::GetVtcTiming(){
	return &vtc_timing_;
}

u16 VideoCapture::GetVtcInterruptId(){
	return vtc_interrupt_id_;
}

u16 VideoCapture::GetVtcId(){
	return vtc_id_;
}

InterruptController* VideoCapture::GetInterruptController(){
	return intc_;
}

u32 VideoCapture::GetStride(){
	return stride_;
}

void VideoCapture::SetStride(u32 stride){
	stride_ = stride;
}

u32 VideoCapture::GetCurrentFrame(){
	return current_frame_;
}

void VideoCapture::SetCurrentFrame(u32 frame_index){
	current_frame_ = frame_index;
}

XGpio* VideoCapture::GetGpio(){
	return &gpio_;
}

void VideoCapture::SetStartOnDetect(bool start_on_detect){
	start_on_detect_ = start_on_detect;
}

bool VideoCapture::GetStartOnDetect(){
	return start_on_detect_;
}

void VideoCapture::SetCallback(VideoCallback callback, void* context){
	callback_ = callback;
	callback_context_ = context;
}

void VideoCapture::SetFramePtr(u8* frame_ptr[NUM_FRAMES]){
	for(int i=0; i < NUM_FRAMES; i++){
		frame_ptr_[i] = frame_ptr[i];
	}
}

u8* VideoCapture::GetFramePtr(u32 frame_index){
	return frame_ptr_[frame_index];
}

void VideoCapture::GpioInterruptHandler(void* context){
	VideoCapture* video_capture = reinterpret_cast<VideoCapture*>(context);
	XGpio* gpio = video_capture->GetGpio();
	XGpio_InterruptClear(gpio, XGPIO_IR_CH2_MASK);
	u32 locked = XGpio_DiscreteRead(gpio, 2);

	if(locked){
		XVtc* vtc = video_capture->GetVtc();
		XVtc_Config* vtc_config = video_capture->GetVtcConfig();

		InterruptController* intc = video_capture->GetInterruptController();

		vtc_config = XVtc_LookupConfig(vtc_id_);
		XVtc_CfgInitialize(&vtc_, vtc_config_, vtc_config_->BaseAddress);
		XVtc_SelfTest(&vtc_);
		XVtc_IntrEnable(vtc, 0x100);
		intc->Enable(video_capture->GetVtcInterruptId());
	}
	else{
		video_capture->Disconnect();
	}
}

void VideoCapture::VtcLockedCallback(void* context, u32 pending_int){
	VideoCapture* video_capture = reinterpret_cast<VideoCapture*>(context);
	XVtc* vtc = video_capture->GetVtc();
	if((XVtc_GetDetectionStatus(vtc)) & XVTC_STAT_LOCKED_MASK)
	{
		video_capture->Connect();
		if (video_capture->GetStartOnDetect())
		{
			video_capture->Start();
		}
	}
}
