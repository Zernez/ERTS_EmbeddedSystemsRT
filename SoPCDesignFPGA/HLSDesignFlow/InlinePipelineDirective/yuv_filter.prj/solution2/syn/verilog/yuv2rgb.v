// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module yuv2rgb (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state13 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten_reg_190;
reg   [15:0] x_reg_201;
reg   [15:0] y_reg_212;
wire   [31:0] bound_fu_563_p2;
reg   [31:0] bound_reg_606;
wire   [0:0] exitcond_flatten_fu_231_p2;
reg   [0:0] exitcond_flatten_reg_611;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_611;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_611;
wire   [31:0] indvar_flatten_next_fu_236_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] y_mid2_fu_253_p3;
reg   [15:0] y_mid2_reg_620;
wire   [15:0] tmp_mid2_v_fu_261_p3;
reg   [15:0] tmp_mid2_v_reg_626;
wire   [12:0] tmp_fu_269_p1;
reg   [12:0] tmp_reg_631;
wire   [14:0] tmp_2_fu_273_p1;
reg   [14:0] tmp_2_reg_636;
wire   [22:0] tmp_8_fu_300_p2;
reg   [22:0] tmp_8_reg_641;
wire   [15:0] y_2_fu_306_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] tmp_28_cast_fu_311_p1;
reg   [31:0] tmp_28_cast_reg_651;
reg   [31:0] ap_reg_pp0_iter3_tmp_28_cast_reg_651;
reg   [31:0] ap_reg_pp0_iter4_tmp_28_cast_reg_651;
reg   [31:0] ap_reg_pp0_iter5_tmp_28_cast_reg_651;
reg   [31:0] ap_reg_pp0_iter6_tmp_28_cast_reg_651;
reg   [31:0] ap_reg_pp0_iter7_tmp_28_cast_reg_651;
reg   [31:0] ap_reg_pp0_iter8_tmp_28_cast_reg_651;
wire   [7:0] E_fu_315_p2;
reg   [7:0] E_reg_675;
reg   [7:0] ap_reg_pp0_iter6_E_reg_675;
reg  signed [7:0] ap_reg_pp0_iter7_E_reg_675;
reg   [7:0] Y_reg_681;
wire   [7:0] D_fu_321_p2;
reg  signed [7:0] D_reg_686;
reg   [7:0] ap_reg_pp0_iter7_D_reg_686;
wire   [16:0] tmp_14_fu_330_p2;
reg   [16:0] tmp_14_reg_693;
wire  signed [17:0] grp_fu_569_p4;
reg  signed [17:0] tmp_10_reg_698;
reg    ap_enable_reg_pp0_iter7;
wire  signed [16:0] grp_fu_580_p3;
reg  signed [16:0] tmp1_reg_704;
(* use_dsp48 = "no" *) wire   [17:0] tmp2_fu_353_p2;
reg   [17:0] tmp2_reg_709;
wire  signed [17:0] grp_fu_587_p3;
reg  signed [17:0] tmp_11_reg_714;
reg    ap_enable_reg_pp0_iter8;
wire   [0:0] icmp_fu_370_p2;
reg   [0:0] icmp_reg_720;
wire   [7:0] G_fu_432_p3;
reg   [7:0] G_reg_726;
wire   [7:0] B_fu_508_p3;
reg   [7:0] B_reg_731;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg   [15:0] x_phi_fu_205_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [15:0] y_phi_fu_216_p4;
wire   [0:0] exitcond5_fu_248_p2;
wire   [15:0] x_2_fu_242_p2;
wire   [22:0] p_shl3_cast_fu_284_p3;
wire   [22:0] p_shl2_cast_fu_277_p3;
wire   [22:0] tmp_s_fu_291_p2;
wire   [22:0] tmp_cast_fu_297_p1;
wire  signed [7:0] tmp_14_fu_330_p1;
wire   [9:0] p_shl1_fu_342_p3;
wire  signed [17:0] p_shl1_cast_fu_349_p1;
wire   [1:0] tmp_5_fu_361_p4;
wire  signed [17:0] tmp1_cast_fu_376_p1;
(* use_dsp48 = "no" *) wire   [17:0] tmp_15_fu_379_p2;
wire   [1:0] tmp_16_fu_384_p4;
wire   [0:0] icmp1_fu_394_p2;
wire   [0:0] tmp_17_fu_400_p3;
wire   [0:0] tmp_6_fu_426_p2;
wire   [7:0] p_phitmp2_fu_418_p3;
wire   [7:0] phitmp2_fu_408_p4;
wire   [16:0] p_shl_fu_440_p3;
wire  signed [18:0] p_shl_cast_fu_447_p1;
wire  signed [18:0] tmp2_cast_fu_451_p1;
wire   [18:0] tmp_18_fu_454_p2;
wire   [2:0] tmp_19_fu_460_p4;
wire   [0:0] icmp2_fu_470_p2;
wire   [0:0] tmp_20_fu_476_p3;
wire   [0:0] tmp_9_fu_502_p2;
wire   [7:0] p_phitmp3_fu_494_p3;
wire   [7:0] phitmp3_fu_484_p4;
wire   [0:0] tmp_12_fu_516_p3;
wire   [0:0] tmp_3_fu_539_p2;
wire   [7:0] p_phitmp_fu_532_p3;
wire   [7:0] phitmp_fu_523_p4;
wire    ap_CS_fsm_state13;
wire   [15:0] bound_fu_563_p0;
wire   [15:0] bound_fu_563_p1;
wire  signed [4:0] grp_fu_569_p0;
wire   [7:0] grp_fu_569_p1;
wire   [9:0] grp_fu_569_p2;
wire   [8:0] grp_fu_569_p3;
wire  signed [7:0] grp_fu_580_p0;
wire   [9:0] grp_fu_587_p0;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_563_p00;
wire   [31:0] bound_fu_563_p10;
wire   [8:0] grp_fu_569_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_x_U24(
    .din0(bound_fu_563_p0),
    .din1(bound_fu_563_p1),
    .dout(bound_fu_563_p2)
);

yuv_filter_ama_adfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 9 ),
    .dout_WIDTH( 18 ))
yuv_filter_ama_adfYi_U25(
    .din0(grp_fu_569_p0),
    .din1(grp_fu_569_p1),
    .din2(grp_fu_569_p2),
    .din3(grp_fu_569_p3),
    .dout(grp_fu_569_p4)
);

yuv_filter_mac_mug8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 17 ),
    .dout_WIDTH( 17 ))
yuv_filter_mac_mug8j_U26(
    .din0(grp_fu_580_p0),
    .din1(D_reg_686),
    .din2(tmp_14_reg_693),
    .dout(grp_fu_580_p3)
);

yuv_filter_mac_muhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
yuv_filter_mac_muhbi_U27(
    .din0(grp_fu_587_p0),
    .din1(ap_reg_pp0_iter7_E_reg_675),
    .din2(tmp_10_reg_698),
    .dout(grp_fu_587_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_231_p2 == 1'd0))) begin
        indvar_flatten_reg_190 <= indvar_flatten_next_fu_236_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_190 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        x_reg_201 <= tmp_mid2_v_reg_626;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_201 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_reg_212 <= y_2_fu_306_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_reg_212 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_611 == 1'd0))) begin
        B_reg_731 <= B_fu_508_p3;
        G_reg_726 <= G_fu_432_p3;
        icmp_reg_720 <= icmp_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter5_exitcond_flatten_reg_611 == 1'd0))) begin
        D_reg_686 <= D_fu_321_p2;
        Y_reg_681 <= in_channels_ch1_q0;
        tmp_14_reg_693 <= tmp_14_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter4_exitcond_flatten_reg_611 == 1'd0))) begin
        E_reg_675 <= E_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_611 <= exitcond_flatten_reg_611;
        exitcond_flatten_reg_611 <= exitcond_flatten_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_611 <= ap_reg_pp0_iter1_exitcond_flatten_reg_611;
        ap_reg_pp0_iter3_exitcond_flatten_reg_611 <= ap_reg_pp0_iter2_exitcond_flatten_reg_611;
        ap_reg_pp0_iter3_tmp_28_cast_reg_651[22 : 0] <= tmp_28_cast_reg_651[22 : 0];
        ap_reg_pp0_iter4_exitcond_flatten_reg_611 <= ap_reg_pp0_iter3_exitcond_flatten_reg_611;
        ap_reg_pp0_iter4_tmp_28_cast_reg_651[22 : 0] <= ap_reg_pp0_iter3_tmp_28_cast_reg_651[22 : 0];
        ap_reg_pp0_iter5_exitcond_flatten_reg_611 <= ap_reg_pp0_iter4_exitcond_flatten_reg_611;
        ap_reg_pp0_iter5_tmp_28_cast_reg_651[22 : 0] <= ap_reg_pp0_iter4_tmp_28_cast_reg_651[22 : 0];
        ap_reg_pp0_iter6_E_reg_675 <= E_reg_675;
        ap_reg_pp0_iter6_exitcond_flatten_reg_611 <= ap_reg_pp0_iter5_exitcond_flatten_reg_611;
        ap_reg_pp0_iter6_tmp_28_cast_reg_651[22 : 0] <= ap_reg_pp0_iter5_tmp_28_cast_reg_651[22 : 0];
        ap_reg_pp0_iter7_D_reg_686 <= D_reg_686;
        ap_reg_pp0_iter7_E_reg_675 <= ap_reg_pp0_iter6_E_reg_675;
        ap_reg_pp0_iter7_exitcond_flatten_reg_611 <= ap_reg_pp0_iter6_exitcond_flatten_reg_611;
        ap_reg_pp0_iter7_tmp_28_cast_reg_651[22 : 0] <= ap_reg_pp0_iter6_tmp_28_cast_reg_651[22 : 0];
        ap_reg_pp0_iter8_exitcond_flatten_reg_611 <= ap_reg_pp0_iter7_exitcond_flatten_reg_611;
        ap_reg_pp0_iter8_tmp_28_cast_reg_651[22 : 0] <= ap_reg_pp0_iter7_tmp_28_cast_reg_651[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_606 <= bound_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7) & (ap_reg_pp0_iter6_exitcond_flatten_reg_611 == 1'd0))) begin
        tmp1_reg_704 <= grp_fu_580_p3;
        tmp_10_reg_698 <= grp_fu_569_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter6_exitcond_flatten_reg_611 == 1'd0))) begin
        tmp2_reg_709 <= tmp2_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_flatten_reg_611 == 1'd0))) begin
        tmp_11_reg_714 <= grp_fu_587_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_611 == 1'd0))) begin
        tmp_28_cast_reg_651[22 : 0] <= tmp_28_cast_fu_311_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_fu_231_p2 == 1'd0))) begin
        tmp_2_reg_636 <= tmp_2_fu_273_p1;
        tmp_reg_631 <= tmp_fu_269_p1;
        y_mid2_reg_620 <= y_mid2_fu_253_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_611 == 1'd0))) begin
        tmp_8_reg_641 <= tmp_8_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_231_p2 == 1'd0))) begin
        tmp_mid2_v_reg_626 <= tmp_mid2_v_fu_261_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_231_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state13))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter6)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter8_exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter8_exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter8_exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter9))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        x_phi_fu_205_p4 = tmp_mid2_v_reg_626;
    end else begin
        x_phi_fu_205_p4 = x_reg_201;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_611 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        y_phi_fu_216_p4 = y_2_fu_306_p2;
    end else begin
        y_phi_fu_216_p4 = y_reg_212;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_enable_reg_pp0_iter9 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_231_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter10) & (ap_enable_reg_pp0_iter9 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_231_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_fu_508_p3 = ((tmp_9_fu_502_p2[0:0] === 1'b1) ? p_phitmp3_fu_494_p3 : phitmp3_fu_484_p4);

assign D_fu_321_p2 = (in_channels_ch2_q0 ^ 8'd128);

assign E_fu_315_p2 = (in_channels_ch3_q0 ^ 8'd128);

assign G_fu_432_p3 = ((tmp_6_fu_426_p2[0:0] === 1'b1) ? p_phitmp2_fu_418_p3 : phitmp2_fu_408_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign bound_fu_563_p0 = bound_fu_563_p00;

assign bound_fu_563_p00 = in_height_read;

assign bound_fu_563_p1 = bound_fu_563_p10;

assign bound_fu_563_p10 = in_width_read;

assign exitcond5_fu_248_p2 = ((y_phi_fu_216_p4 == in_height_read) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_231_p2 = ((indvar_flatten_reg_190 == bound_reg_606) ? 1'b1 : 1'b0);

assign grp_fu_569_p0 = 9'd496;

assign grp_fu_569_p1 = grp_fu_569_p10;

assign grp_fu_569_p10 = Y_reg_681;

assign grp_fu_569_p2 = 18'd298;

assign grp_fu_569_p3 = 18'd128;

assign grp_fu_580_p0 = 16'd65436;

assign grp_fu_587_p0 = 18'd409;

assign icmp1_fu_394_p2 = ((tmp_16_fu_384_p4 == 2'd1) ? 1'b1 : 1'b0);

assign icmp2_fu_470_p2 = (($signed(tmp_19_fu_460_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign icmp_fu_370_p2 = ((tmp_5_fu_361_p4 == 2'd1) ? 1'b1 : 1'b0);

assign in_channels_ch1_address0 = tmp_28_cast_reg_651;

assign in_channels_ch2_address0 = tmp_28_cast_reg_651;

assign in_channels_ch3_address0 = tmp_28_cast_fu_311_p1;

assign indvar_flatten_next_fu_236_p2 = (indvar_flatten_reg_190 + 32'd1);

assign out_channels_ch1_address0 = ap_reg_pp0_iter8_tmp_28_cast_reg_651;

assign out_channels_ch1_d0 = ((tmp_3_fu_539_p2[0:0] === 1'b1) ? p_phitmp_fu_532_p3 : phitmp_fu_523_p4);

assign out_channels_ch2_address0 = ap_reg_pp0_iter8_tmp_28_cast_reg_651;

assign out_channels_ch2_d0 = G_reg_726;

assign out_channels_ch3_address0 = ap_reg_pp0_iter8_tmp_28_cast_reg_651;

assign out_channels_ch3_d0 = B_reg_731;

assign p_phitmp2_fu_418_p3 = ((icmp1_fu_394_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_phitmp3_fu_494_p3 = ((icmp2_fu_470_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_phitmp_fu_532_p3 = ((icmp_reg_720[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign p_shl1_cast_fu_349_p1 = $signed(p_shl1_fu_342_p3);

assign p_shl1_fu_342_p3 = {{D_reg_686}, {2'd0}};

assign p_shl2_cast_fu_277_p3 = {{tmp_reg_631}, {10'd0}};

assign p_shl3_cast_fu_284_p3 = {{tmp_2_reg_636}, {8'd0}};

assign p_shl_cast_fu_447_p1 = $signed(p_shl_fu_440_p3);

assign p_shl_fu_440_p3 = {{ap_reg_pp0_iter7_D_reg_686}, {9'd0}};

assign phitmp2_fu_408_p4 = {{tmp_15_fu_379_p2[15:8]}};

assign phitmp3_fu_484_p4 = {{tmp_18_fu_454_p2[15:8]}};

assign phitmp_fu_523_p4 = {{tmp_11_reg_714[15:8]}};

assign tmp1_cast_fu_376_p1 = tmp1_reg_704;

assign tmp2_cast_fu_451_p1 = $signed(tmp2_reg_709);

assign tmp2_fu_353_p2 = ($signed(grp_fu_569_p4) + $signed(p_shl1_cast_fu_349_p1));

assign tmp_12_fu_516_p3 = tmp_11_reg_714[32'd17];

assign tmp_14_fu_330_p1 = E_reg_675;

assign tmp_14_fu_330_p2 = ($signed(17'd130864) * $signed(tmp_14_fu_330_p1));

assign tmp_15_fu_379_p2 = ($signed(tmp_10_reg_698) + $signed(tmp1_cast_fu_376_p1));

assign tmp_16_fu_384_p4 = {{tmp_15_fu_379_p2[17:16]}};

assign tmp_17_fu_400_p3 = tmp_15_fu_379_p2[32'd17];

assign tmp_18_fu_454_p2 = ($signed(p_shl_cast_fu_447_p1) + $signed(tmp2_cast_fu_451_p1));

assign tmp_19_fu_460_p4 = {{tmp_18_fu_454_p2[18:16]}};

assign tmp_20_fu_476_p3 = tmp_18_fu_454_p2[32'd18];

assign tmp_28_cast_fu_311_p1 = tmp_8_reg_641;

assign tmp_2_fu_273_p1 = tmp_mid2_v_fu_261_p3[14:0];

assign tmp_3_fu_539_p2 = (icmp_reg_720 | tmp_12_fu_516_p3);

assign tmp_5_fu_361_p4 = {{grp_fu_587_p3[17:16]}};

assign tmp_6_fu_426_p2 = (icmp1_fu_394_p2 | tmp_17_fu_400_p3);

assign tmp_8_fu_300_p2 = (tmp_s_fu_291_p2 + tmp_cast_fu_297_p1);

assign tmp_9_fu_502_p2 = (icmp2_fu_470_p2 | tmp_20_fu_476_p3);

assign tmp_cast_fu_297_p1 = y_mid2_reg_620;

assign tmp_fu_269_p1 = tmp_mid2_v_fu_261_p3[12:0];

assign tmp_mid2_v_fu_261_p3 = ((exitcond5_fu_248_p2[0:0] === 1'b1) ? x_2_fu_242_p2 : x_phi_fu_205_p4);

assign tmp_s_fu_291_p2 = (p_shl3_cast_fu_284_p3 + p_shl2_cast_fu_277_p3);

assign x_2_fu_242_p2 = (16'd1 + x_phi_fu_205_p4);

assign y_2_fu_306_p2 = (16'd1 + y_mid2_reg_620);

assign y_mid2_fu_253_p3 = ((exitcond5_fu_248_p2[0:0] === 1'b1) ? 16'd0 : y_phi_fu_216_p4);

always @ (posedge ap_clk) begin
    tmp_28_cast_reg_651[31:23] <= 9'b000000000;
    ap_reg_pp0_iter3_tmp_28_cast_reg_651[31:23] <= 9'b000000000;
    ap_reg_pp0_iter4_tmp_28_cast_reg_651[31:23] <= 9'b000000000;
    ap_reg_pp0_iter5_tmp_28_cast_reg_651[31:23] <= 9'b000000000;
    ap_reg_pp0_iter6_tmp_28_cast_reg_651[31:23] <= 9'b000000000;
    ap_reg_pp0_iter7_tmp_28_cast_reg_651[31:23] <= 9'b000000000;
    ap_reg_pp0_iter8_tmp_28_cast_reg_651[31:23] <= 9'b000000000;
end

endmodule //yuv2rgb
