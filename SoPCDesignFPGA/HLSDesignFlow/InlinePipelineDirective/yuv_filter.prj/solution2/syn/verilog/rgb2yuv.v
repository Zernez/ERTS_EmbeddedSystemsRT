// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module rgb2yuv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_channels_ch1_address0,
        in_channels_ch1_ce0,
        in_channels_ch1_q0,
        in_channels_ch2_address0,
        in_channels_ch2_ce0,
        in_channels_ch2_q0,
        in_channels_ch3_address0,
        in_channels_ch3_ce0,
        in_channels_ch3_q0,
        in_width_read,
        in_height_read,
        out_channels_ch1_address0,
        out_channels_ch1_ce0,
        out_channels_ch1_we0,
        out_channels_ch1_d0,
        out_channels_ch2_address0,
        out_channels_ch2_ce0,
        out_channels_ch2_we0,
        out_channels_ch2_d0,
        out_channels_ch3_address0,
        out_channels_ch3_ce0,
        out_channels_ch3_we0,
        out_channels_ch3_d0,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state12 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [21:0] in_channels_ch1_address0;
output   in_channels_ch1_ce0;
input  [7:0] in_channels_ch1_q0;
output  [21:0] in_channels_ch2_address0;
output   in_channels_ch2_ce0;
input  [7:0] in_channels_ch2_q0;
output  [21:0] in_channels_ch3_address0;
output   in_channels_ch3_ce0;
input  [7:0] in_channels_ch3_q0;
input  [15:0] in_width_read;
input  [15:0] in_height_read;
output  [21:0] out_channels_ch1_address0;
output   out_channels_ch1_ce0;
output   out_channels_ch1_we0;
output  [7:0] out_channels_ch1_d0;
output  [21:0] out_channels_ch2_address0;
output   out_channels_ch2_ce0;
output   out_channels_ch2_we0;
output  [7:0] out_channels_ch2_d0;
output  [21:0] out_channels_ch3_address0;
output   out_channels_ch3_ce0;
output   out_channels_ch3_we0;
output  [7:0] out_channels_ch3_d0;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_channels_ch1_ce0;
reg in_channels_ch2_ce0;
reg in_channels_ch3_ce0;
reg out_channels_ch1_ce0;
reg out_channels_ch1_we0;
reg out_channels_ch2_ce0;
reg out_channels_ch2_we0;
reg out_channels_ch3_ce0;
reg out_channels_ch3_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] indvar_flatten_reg_184;
reg   [15:0] x_reg_195;
reg   [15:0] y_reg_206;
wire   [31:0] bound_fu_547_p2;
reg   [31:0] bound_reg_588;
wire   [0:0] exitcond_flatten_fu_225_p2;
reg   [0:0] exitcond_flatten_reg_593;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_593;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_593;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_593;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_593;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_593;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_593;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_593;
wire   [31:0] indvar_flatten_next_fu_230_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [15:0] y_mid2_fu_247_p3;
reg   [15:0] y_mid2_reg_602;
wire   [15:0] tmp_mid2_v_fu_255_p3;
reg   [15:0] tmp_mid2_v_reg_608;
wire   [12:0] tmp_fu_263_p1;
reg   [12:0] tmp_reg_613;
wire   [14:0] tmp_21_fu_267_p1;
reg   [14:0] tmp_21_reg_618;
wire   [22:0] tmp_19_fu_294_p2;
reg   [22:0] tmp_19_reg_623;
wire   [15:0] y_3_fu_300_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] tmp_42_cast_fu_305_p1;
reg   [31:0] tmp_42_cast_reg_633;
reg   [31:0] ap_reg_pp0_iter3_tmp_42_cast_reg_633;
reg   [31:0] ap_reg_pp0_iter4_tmp_42_cast_reg_633;
reg   [31:0] ap_reg_pp0_iter5_tmp_42_cast_reg_633;
reg   [31:0] ap_reg_pp0_iter6_tmp_42_cast_reg_633;
reg   [31:0] ap_reg_pp0_iter7_tmp_42_cast_reg_633;
reg   [7:0] R_reg_655;
reg   [7:0] ap_reg_pp0_iter6_R_reg_655;
reg   [7:0] G_reg_663;
reg   [7:0] B_reg_669;
wire   [8:0] tmp4_fu_315_p2;
reg   [8:0] tmp4_reg_677;
wire   [15:0] tmp_42_cast1_fu_346_p1;
reg   [15:0] tmp_42_cast1_reg_682;
reg   [7:0] tmp_23_reg_687;
wire   [15:0] tmp_25_fu_401_p2;
reg   [15:0] tmp_25_reg_692;
wire   [15:0] tmp_26_fu_433_p2;
reg   [15:0] tmp_26_reg_697;
wire   [15:0] tmp_29_fu_439_p2;
reg   [15:0] tmp_29_reg_702;
wire   [13:0] tmp8_fu_472_p2;
reg   [13:0] tmp8_reg_707;
reg   [7:0] tmp_28_reg_722;
reg   [7:0] tmp_33_reg_727;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg   [15:0] x_phi_fu_199_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [15:0] y_phi_fu_210_p4;
wire   [0:0] exitcond9_fu_242_p2;
wire   [15:0] x_3_fu_236_p2;
wire   [22:0] p_shl_cast_fu_271_p3;
wire   [22:0] p_shl7_cast_fu_278_p3;
wire   [22:0] tmp_cast_fu_291_p1;
wire   [22:0] tmp_s_fu_285_p2;
wire   [8:0] tmp_42_cast2_fu_311_p1;
wire   [13:0] p_shl5_fu_324_p3;
wire   [8:0] p_shl6_fu_335_p3;
wire   [14:0] p_shl4_fu_349_p3;
wire   [14:0] p_shl6_cast_fu_342_p1;
wire   [14:0] p_shl5_cast_fu_331_p1;
wire   [14:0] tmp2_fu_363_p2;
wire   [15:0] tmp2_cast_fu_369_p1;
wire   [15:0] p_shl4_cast_fu_356_p1;
wire   [12:0] grp_fu_553_p3;
wire   [15:0] tmp3_cast_fu_382_p1;
wire   [15:0] tmp1_fu_373_p2;
wire   [15:0] tmp_22_fu_385_p2;
wire   [7:0] tmp_25_fu_401_p1;
wire   [14:0] p_shl2_fu_407_p3;
wire   [11:0] p_shl3_fu_418_p3;
wire   [15:0] p_shl2_cast_fu_414_p1;
wire   [15:0] p_shl3_cast_fu_429_p1;
wire   [7:0] tmp_29_fu_439_p1;
wire   [12:0] p_shl3_cast9_fu_425_p1;
wire   [12:0] p_neg_fu_445_p2;
wire   [8:0] p_shl1_fu_455_p3;
wire  signed [13:0] p_neg_cast_fu_451_p1;
wire   [13:0] p_shl1_cast_fu_462_p1;
wire   [13:0] tmp_31_fu_466_p2;
wire   [15:0] tmp6_fu_487_p2;
wire  signed [15:0] grp_fu_562_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_27_fu_492_p2;
wire  signed [15:0] tmp8_cast_fu_507_p1;
wire  signed [15:0] grp_fu_570_p3;
(* use_dsp48 = "no" *) wire   [15:0] tmp_32_fu_510_p2;
wire    ap_CS_fsm_state12;
wire   [15:0] bound_fu_547_p0;
wire   [15:0] bound_fu_547_p1;
wire   [5:0] grp_fu_553_p0;
wire   [7:0] grp_fu_553_p1;
wire   [8:0] grp_fu_553_p2;
wire  signed [6:0] grp_fu_562_p0;
wire   [7:0] grp_fu_562_p1;
wire  signed [7:0] grp_fu_570_p0;
wire   [7:0] grp_fu_570_p1;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [31:0] bound_fu_547_p00;
wire   [31:0] bound_fu_547_p10;
wire   [12:0] grp_fu_553_p10;
wire   [12:0] grp_fu_553_p20;
wire   [14:0] grp_fu_562_p10;
wire   [15:0] tmp_25_fu_401_p10;
wire   [15:0] tmp_29_fu_439_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

yuv_filter_mul_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
yuv_filter_mul_mubkb_U0(
    .din0(bound_fu_547_p0),
    .din1(bound_fu_547_p1),
    .dout(bound_fu_547_p2)
);

yuv_filter_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
yuv_filter_mac_mucud_U1(
    .din0(grp_fu_553_p0),
    .din1(grp_fu_553_p1),
    .din2(grp_fu_553_p2),
    .dout(grp_fu_553_p3)
);

yuv_filter_mac_mudEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mudEe_U2(
    .din0(grp_fu_562_p0),
    .din1(grp_fu_562_p1),
    .din2(tmp_25_reg_692),
    .dout(grp_fu_562_p3)
);

yuv_filter_mac_mueOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
yuv_filter_mac_mueOg_U3(
    .din0(grp_fu_570_p0),
    .din1(grp_fu_570_p1),
    .din2(tmp_29_reg_702),
    .dout(grp_fu_570_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_225_p2 == 1'd0))) begin
        indvar_flatten_reg_184 <= indvar_flatten_next_fu_230_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_184 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        x_reg_195 <= tmp_mid2_v_reg_608;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_reg_195 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        y_reg_206 <= y_3_fu_300_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        y_reg_206 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter4_exitcond_flatten_reg_593 == 1'd0))) begin
        B_reg_669 <= in_channels_ch3_q0;
        G_reg_663 <= in_channels_ch2_q0;
        R_reg_655 <= in_channels_ch1_q0;
        tmp4_reg_677 <= tmp4_fu_315_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_593 <= exitcond_flatten_reg_593;
        exitcond_flatten_reg_593 <= exitcond_flatten_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_593 <= ap_reg_pp0_iter1_exitcond_flatten_reg_593;
        ap_reg_pp0_iter3_exitcond_flatten_reg_593 <= ap_reg_pp0_iter2_exitcond_flatten_reg_593;
        ap_reg_pp0_iter3_tmp_42_cast_reg_633[22 : 0] <= tmp_42_cast_reg_633[22 : 0];
        ap_reg_pp0_iter4_exitcond_flatten_reg_593 <= ap_reg_pp0_iter3_exitcond_flatten_reg_593;
        ap_reg_pp0_iter4_tmp_42_cast_reg_633[22 : 0] <= ap_reg_pp0_iter3_tmp_42_cast_reg_633[22 : 0];
        ap_reg_pp0_iter5_exitcond_flatten_reg_593 <= ap_reg_pp0_iter4_exitcond_flatten_reg_593;
        ap_reg_pp0_iter5_tmp_42_cast_reg_633[22 : 0] <= ap_reg_pp0_iter4_tmp_42_cast_reg_633[22 : 0];
        ap_reg_pp0_iter6_R_reg_655 <= R_reg_655;
        ap_reg_pp0_iter6_exitcond_flatten_reg_593 <= ap_reg_pp0_iter5_exitcond_flatten_reg_593;
        ap_reg_pp0_iter6_tmp_42_cast_reg_633[22 : 0] <= ap_reg_pp0_iter5_tmp_42_cast_reg_633[22 : 0];
        ap_reg_pp0_iter7_exitcond_flatten_reg_593 <= ap_reg_pp0_iter6_exitcond_flatten_reg_593;
        ap_reg_pp0_iter7_tmp_42_cast_reg_633[22 : 0] <= ap_reg_pp0_iter6_tmp_42_cast_reg_633[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        bound_reg_588 <= bound_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter5_exitcond_flatten_reg_593 == 1'd0))) begin
        tmp8_reg_707[13 : 1] <= tmp8_fu_472_p2[13 : 1];
        tmp_23_reg_687 <= {{tmp_22_fu_385_p2[15:8]}};
        tmp_25_reg_692 <= tmp_25_fu_401_p2;
        tmp_26_reg_697[15 : 4] <= tmp_26_fu_433_p2[15 : 4];
        tmp_29_reg_702 <= tmp_29_fu_439_p2;
        tmp_42_cast1_reg_682[7 : 0] <= tmp_42_cast1_fu_346_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_593 == 1'd0))) begin
        tmp_19_reg_623 <= tmp_19_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_fu_225_p2 == 1'd0))) begin
        tmp_21_reg_618 <= tmp_21_fu_267_p1;
        tmp_reg_613 <= tmp_fu_263_p1;
        y_mid2_reg_602 <= y_mid2_fu_247_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter6_exitcond_flatten_reg_593 == 1'd0))) begin
        tmp_28_reg_722 <= {{tmp_27_fu_492_p2[15:8]}};
        tmp_33_reg_727 <= {{tmp_32_fu_510_p2[15:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_593 == 1'd0))) begin
        tmp_42_cast_reg_633[22 : 0] <= tmp_42_cast_fu_305_p1[22 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_225_p2 == 1'd0))) begin
        tmp_mid2_v_reg_608 <= tmp_mid2_v_fu_255_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_225_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch1_ce0 = 1'b1;
    end else begin
        in_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch2_ce0 = 1'b1;
    end else begin
        in_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter5)))) begin
        in_channels_ch3_ce0 = 1'b1;
    end else begin
        in_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter7)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8)))) begin
        out_channels_ch1_ce0 = 1'b1;
    end else begin
        out_channels_ch1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter6_exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter7))) begin
        out_channels_ch1_we0 = 1'b1;
    end else begin
        out_channels_ch1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)))) begin
        out_channels_ch2_ce0 = 1'b1;
    end else begin
        out_channels_ch2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter8))) begin
        out_channels_ch2_we0 = 1'b1;
    end else begin
        out_channels_ch2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8)) | ((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9)))) begin
        out_channels_ch3_ce0 = 1'b1;
    end else begin
        out_channels_ch3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter7_exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter8))) begin
        out_channels_ch3_we0 = 1'b1;
    end else begin
        out_channels_ch3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        x_phi_fu_199_p4 = tmp_mid2_v_reg_608;
    end else begin
        x_phi_fu_199_p4 = x_reg_195;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_593 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        y_phi_fu_210_p4 = y_3_fu_300_p2;
    end else begin
        y_phi_fu_210_p4 = y_reg_206;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9) & (ap_enable_reg_pp0_iter8 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_225_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9) & (ap_enable_reg_pp0_iter8 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_225_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = in_width_read;

assign ap_return_1 = in_height_read;

assign bound_fu_547_p0 = bound_fu_547_p00;

assign bound_fu_547_p00 = in_height_read;

assign bound_fu_547_p1 = bound_fu_547_p10;

assign bound_fu_547_p10 = in_width_read;

assign exitcond9_fu_242_p2 = ((y_phi_fu_210_p4 == in_height_read) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_225_p2 = ((indvar_flatten_reg_184 == bound_reg_588) ? 1'b1 : 1'b0);

assign grp_fu_553_p0 = 13'd25;

assign grp_fu_553_p1 = grp_fu_553_p10;

assign grp_fu_553_p10 = B_reg_669;

assign grp_fu_553_p2 = grp_fu_553_p20;

assign grp_fu_553_p20 = tmp4_reg_677;

assign grp_fu_562_p0 = 15'd32730;

assign grp_fu_562_p1 = grp_fu_562_p10;

assign grp_fu_562_p10 = ap_reg_pp0_iter6_R_reg_655;

assign grp_fu_570_p0 = 16'd65442;

assign grp_fu_570_p1 = tmp_42_cast1_reg_682;

assign in_channels_ch1_address0 = tmp_42_cast_fu_305_p1;

assign in_channels_ch2_address0 = tmp_42_cast_fu_305_p1;

assign in_channels_ch3_address0 = tmp_42_cast_fu_305_p1;

assign indvar_flatten_next_fu_230_p2 = (indvar_flatten_reg_184 + 32'd1);

assign out_channels_ch1_address0 = ap_reg_pp0_iter6_tmp_42_cast_reg_633;

assign out_channels_ch1_d0 = (8'd16 + tmp_23_reg_687);

assign out_channels_ch2_address0 = ap_reg_pp0_iter7_tmp_42_cast_reg_633;

assign out_channels_ch2_d0 = (tmp_28_reg_722 ^ 8'd128);

assign out_channels_ch3_address0 = ap_reg_pp0_iter7_tmp_42_cast_reg_633;

assign out_channels_ch3_d0 = (tmp_33_reg_727 ^ 8'd128);

assign p_neg_cast_fu_451_p1 = $signed(p_neg_fu_445_p2);

assign p_neg_fu_445_p2 = (13'd0 - p_shl3_cast9_fu_425_p1);

assign p_shl1_cast_fu_462_p1 = p_shl1_fu_455_p3;

assign p_shl1_fu_455_p3 = {{B_reg_669}, {1'd0}};

assign p_shl2_cast_fu_414_p1 = p_shl2_fu_407_p3;

assign p_shl2_fu_407_p3 = {{B_reg_669}, {7'd0}};

assign p_shl3_cast9_fu_425_p1 = p_shl3_fu_418_p3;

assign p_shl3_cast_fu_429_p1 = p_shl3_fu_418_p3;

assign p_shl3_fu_418_p3 = {{B_reg_669}, {4'd0}};

assign p_shl4_cast_fu_356_p1 = p_shl4_fu_349_p3;

assign p_shl4_fu_349_p3 = {{G_reg_663}, {7'd0}};

assign p_shl5_cast_fu_331_p1 = p_shl5_fu_324_p3;

assign p_shl5_fu_324_p3 = {{R_reg_655}, {6'd0}};

assign p_shl6_cast_fu_342_p1 = p_shl6_fu_335_p3;

assign p_shl6_fu_335_p3 = {{R_reg_655}, {1'd0}};

assign p_shl7_cast_fu_278_p3 = {{tmp_21_reg_618}, {8'd0}};

assign p_shl_cast_fu_271_p3 = {{tmp_reg_613}, {10'd0}};

assign tmp1_fu_373_p2 = (tmp2_cast_fu_369_p1 + p_shl4_cast_fu_356_p1);

assign tmp2_cast_fu_369_p1 = tmp2_fu_363_p2;

assign tmp2_fu_363_p2 = (p_shl6_cast_fu_342_p1 + p_shl5_cast_fu_331_p1);

assign tmp3_cast_fu_382_p1 = grp_fu_553_p3;

assign tmp4_fu_315_p2 = (9'd128 + tmp_42_cast2_fu_311_p1);

assign tmp6_fu_487_p2 = (16'd128 + tmp_26_reg_697);

assign tmp8_cast_fu_507_p1 = $signed(tmp8_reg_707);

assign tmp8_fu_472_p2 = (14'd128 + tmp_31_fu_466_p2);

assign tmp_19_fu_294_p2 = (tmp_cast_fu_291_p1 + tmp_s_fu_285_p2);

assign tmp_21_fu_267_p1 = tmp_mid2_v_fu_255_p3[14:0];

assign tmp_22_fu_385_p2 = (tmp3_cast_fu_382_p1 + tmp1_fu_373_p2);

assign tmp_25_fu_401_p1 = tmp_25_fu_401_p10;

assign tmp_25_fu_401_p10 = G_reg_663;

assign tmp_25_fu_401_p2 = ($signed(16'd65462) * $signed({{1'b0}, {tmp_25_fu_401_p1}}));

assign tmp_26_fu_433_p2 = (p_shl2_cast_fu_414_p1 - p_shl3_cast_fu_429_p1);

assign tmp_27_fu_492_p2 = ($signed(tmp6_fu_487_p2) + $signed(grp_fu_562_p3));

assign tmp_29_fu_439_p1 = tmp_29_fu_439_p10;

assign tmp_29_fu_439_p10 = R_reg_655;

assign tmp_29_fu_439_p2 = (16'd122 * tmp_29_fu_439_p1);

assign tmp_31_fu_466_p2 = ($signed(p_neg_cast_fu_451_p1) - $signed(p_shl1_cast_fu_462_p1));

assign tmp_32_fu_510_p2 = ($signed(tmp8_cast_fu_507_p1) + $signed(grp_fu_570_p3));

assign tmp_42_cast1_fu_346_p1 = G_reg_663;

assign tmp_42_cast2_fu_311_p1 = in_channels_ch2_q0;

assign tmp_42_cast_fu_305_p1 = tmp_19_reg_623;

assign tmp_cast_fu_291_p1 = y_mid2_reg_602;

assign tmp_fu_263_p1 = tmp_mid2_v_fu_255_p3[12:0];

assign tmp_mid2_v_fu_255_p3 = ((exitcond9_fu_242_p2[0:0] === 1'b1) ? x_3_fu_236_p2 : x_phi_fu_199_p4);

assign tmp_s_fu_285_p2 = (p_shl_cast_fu_271_p3 + p_shl7_cast_fu_278_p3);

assign x_3_fu_236_p2 = (16'd1 + x_phi_fu_199_p4);

assign y_3_fu_300_p2 = (16'd1 + y_mid2_reg_602);

assign y_mid2_fu_247_p3 = ((exitcond9_fu_242_p2[0:0] === 1'b1) ? 16'd0 : y_phi_fu_210_p4);

always @ (posedge ap_clk) begin
    tmp_42_cast_reg_633[31:23] <= 9'b000000000;
    ap_reg_pp0_iter3_tmp_42_cast_reg_633[31:23] <= 9'b000000000;
    ap_reg_pp0_iter4_tmp_42_cast_reg_633[31:23] <= 9'b000000000;
    ap_reg_pp0_iter5_tmp_42_cast_reg_633[31:23] <= 9'b000000000;
    ap_reg_pp0_iter6_tmp_42_cast_reg_633[31:23] <= 9'b000000000;
    ap_reg_pp0_iter7_tmp_42_cast_reg_633[31:23] <= 9'b000000000;
    tmp_42_cast1_reg_682[15:8] <= 8'b00000000;
    tmp_26_reg_697[3:0] <= 4'b0000;
    tmp8_reg_707[0] <= 1'b0;
end

endmodule //rgb2yuv
