// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "advios_makePulse.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic advios_makePulse::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic advios_makePulse::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> advios_makePulse::ap_ST_fsm_state2 = "10";
const sc_lv<4> advios_makePulse::ap_ST_fsm_state3 = "100";
const sc_lv<4> advios_makePulse::ap_ST_fsm_state4 = "1000";
const sc_lv<32> advios_makePulse::ap_const_lv32_3 = "11";
const sc_lv<27> advios_makePulse::ap_const_lv27_0 = "000000000000000000000000000";
const sc_lv<32> advios_makePulse::ap_const_lv32_2 = "10";
const sc_lv<1> advios_makePulse::ap_const_lv1_0 = "0";
const sc_lv<1> advios_makePulse::ap_const_lv1_1 = "1";
const sc_lv<27> advios_makePulse::ap_const_lv27_5F5E100 = "101111101011110000100000000";
const sc_lv<27> advios_makePulse::ap_const_lv27_1 = "1";
const sc_lv<4> advios_makePulse::ap_const_lv4_1 = "1";
const bool advios_makePulse::ap_const_boolean_1 = true;

advios_makePulse::advios_makePulse(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_count_o);
    sensitive << ( count_i );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_111_p2 );

    SC_METHOD(thread_count_o_ap_vld);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_111_p2 );

    SC_METHOD(thread_exitcond_fu_111_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( i_reg_100 );

    SC_METHOD(thread_i_1_fu_117_p2);
    sensitive << ( i_reg_100 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_fu_111_p2 );

    ap_CS_fsm = "0010";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "advios_makePulse_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, count_i, "(port)count_i");
    sc_trace(mVcdFile, count_o, "(port)count_o");
    sc_trace(mVcdFile, count_o_ap_vld, "(port)count_o_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, i_1_fu_117_p2, "i_1_fu_117_p2");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, i_reg_100, "i_reg_100");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, exitcond_fu_111_p2, "exitcond_fu_111_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

advios_makePulse::~advios_makePulse() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void advios_makePulse::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state2;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_111_p2.read(), ap_const_lv1_0))) {
        i_reg_100 = i_1_fu_117_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_100 = ap_const_lv27_0;
    }
}

void advios_makePulse::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void advios_makePulse::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void advios_makePulse::thread_count_o() {
    count_o = (!count_i.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(count_i.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void advios_makePulse::thread_count_o_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_111_p2.read(), ap_const_lv1_1))) {
        count_o_ap_vld = ap_const_logic_1;
    } else {
        count_o_ap_vld = ap_const_logic_0;
    }
}

void advios_makePulse::thread_exitcond_fu_111_p2() {
    exitcond_fu_111_p2 = (!i_reg_100.read().is_01() || !ap_const_lv27_5F5E100.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_100.read() == ap_const_lv27_5F5E100);
}

void advios_makePulse::thread_i_1_fu_117_p2() {
    i_1_fu_117_p2 = (!i_reg_100.read().is_01() || !ap_const_lv27_1.is_01())? sc_lv<27>(): (sc_biguint<27>(i_reg_100.read()) + sc_biguint<27>(ap_const_lv27_1));
}

void advios_makePulse::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(exitcond_fu_111_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

