// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module advios_makePulse (
        ap_clk,
        ap_rst,
        count_i,
        count_o,
        count_o_ap_vld
);

parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input  [3:0] count_i;
output  [3:0] count_o;
output   count_o_ap_vld;

reg count_o_ap_vld;

wire   [26:0] i_1_fu_117_p2;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg   [26:0] i_reg_100;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_111_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd2;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state2;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_111_p2 == 1'd0))) begin
        i_reg_100 <= i_1_fu_117_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_100 <= 27'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_111_p2 == 1'd1))) begin
        count_o_ap_vld = 1'b1;
    end else begin
        count_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_fu_111_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign count_o = (count_i + 4'd1);

assign exitcond_fu_111_p2 = ((i_reg_100 == 27'd100000000) ? 1'b1 : 1'b0);

assign i_1_fu_117_p2 = (i_reg_100 + 27'd1);

endmodule //advios_makePulse
